<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos7.6利用docker-compose同一管理容器服务</title>
      <link href="/7761.html"/>
      <url>/7761.html</url>
      
        <content type="html"><![CDATA[<p>众所周知，一个大型的Docker容器组成的微服务应用中，容器的数量是非常巨大的，如果依赖传统的人工配置方式进行维护，对于开发和运维来说简直就是噩梦。docker-compose的出现正是为了解决这个问题。</p><p>docker-compose是一个用于定义和运行多容器Docker应用的工具，只需要一个Compose的配置文件和一个简单的命令就可以创建并运行应用所需的所有容器。在配置文件中，所有容器通过services来定义，并使用docker-compose命令启动或停止容器以及所有依赖容器。</p><p>我们的目标是：在docker容器内部创建一个基于tornado的web应用服务</p><p>需要注意一点，在 Docker 中有一个由官方提供的中央镜像仓库，不过，由于众所周知的原因，有时它除了慢的可怜以外，还经常莫名其妙的完全无法访问。</p><p>在 Linux 环境下，我们可以通过修改 /etc/docker/daemon.json ( 如果文件不存在，你可以直接创建它 ) 这个 Docker 服务的配置文件达到效果,从而将国外的源转向国内，使下载速度和效率提高。</p><p>vim /etc/docker/daemon.json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启docker，使其生效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><pre><code>首先需要一个文件夹作为项目主文件夹</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir composetest</span><br><span class="line">cd composetest</span><br></pre></td></tr></table></figure><pre><code>在项目主文件夹下创建一个app.py文件</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  tornado.web <span class="keyword">import</span> RequestHandler</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application(handlers=[</span><br><span class="line">        (<span class="string">r'/'</span>, IndexHandler)</span><br><span class="line">    ],debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8000</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><pre><code>在项目文件夹下创建一个requirements.txt的文件，这是你的web项目依赖，这里我们只需要一个tornado</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tornado==<span class="number">5.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>到此，我们已经完成了新建项目，编码，添加依赖等工作</p><p>下面我们创建一个Dockerfile文件用于构建Docker镜像，该镜像包含了运行该Web应用的所有依赖，包括Python运行环境。</p><p>在项目文件夹下创建一个Dockerfile文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM python:<span class="number">3.4</span>-alpine</span><br><span class="line">ADD . /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">CMD [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span><br></pre></td></tr></table></figure><pre><code>上面的命令的意思是：使用python-3.4-alpine作为基础镜像将当前目录添加到镜像中/code目录下将/code设置为工作目录安装Python依赖设置默认执行命令在项目文件夹下创建一个docker-compose.yml文件</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2.0'</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">     - <span class="string">"8000:8000"</span></span><br><span class="line">    volumes:</span><br><span class="line">     - .:/code</span><br></pre></td></tr></table></figure><p>该配置文件中包含一个services，即web服务。web会使用当前目录中的Dockerfile文件构建镜像，并将容器的8000端口暴露给主机，然后将项目文件夹挂载到容器中的/code目录下</p><pre><code>至此，所有配置都已经弄好了，项目结构如下：![](/images/20190902092915_82650.png)</code></pre><p>执行命令运行容器，则docker-compose将会根据docker-file所写的脚本一键构建web应用的镜像以及启动容器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up</span><br></pre></td></tr></table></figure><pre><code>此时，访问localhost:8000![](/images/20190902093114_96444.png)说明我们构建的镜像已经运行起来，如此一来，我们只需要关注代码逻辑的编写，而不用考虑环境的搭建了，环境只需要依赖docker帮我们做就好了。上面提到的Componse使用命令构建并启动容器，是以前台的方式启动的，如果希望以后台启动，可以添加参数-d，比如下面这样</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>而且可以查看目前正在运行的容器，有点类似docker-ps</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p><img src="/images/20190902094032_18479.png" alt><br>如果使用sudo docker-compose up -d命令以后台方式启动，可以用docker-compose stop命令停止。docker-compose down 命令可以停止容器并将其删除。</p><p>有关Compose的更多命令，可以通过sudo docker-compose –help查看</p><p>可以发现，docker-compose将docker run命令整合到了一个docker-compose.yml配置文件中，对于大型Docker集群的管理是很方便的，例可以将多个service组合成更复杂的service组，为每个service指定不同的Dockerfile，然后把它们link在一起。</p>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.6部署Docker环境以及安装docker-compose</title>
      <link href="/12290.html"/>
      <url>/12290.html</url>
      
        <content type="html"><![CDATA[<p>毫无疑问，Docker目前是现阶段最为火爆的容器技术了，它在业务解耦和拆分业务层面有着不可忽视的作用，而使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具，这里记录一下如何在centos7.6上部署Docker以及docker-compose</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#升级yum</span></span><br><span class="line">sudo yum update</span><br><span class="line"><span class="comment">#卸载旧版本docker</span></span><br><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#设置源</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum makecache fast</span><br><span class="line"><span class="comment">#安装docker</span></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull hello-world</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>启动容器后，如果出现下面的输出则表示安装成功<br><img src="/images/201908210.png" alt><br>下面安装docker-compose，运行下面的脚本可以自动安装，并且授权</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/<span class="number">1.21</span><span class="number">.2</span>/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>安装成功后，检查版本号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.6安装Docker</title>
      <link href="/10686.html"/>
      <url>/10686.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>切记每次操作需要在root权限下,否则会没有权限,也可以在下方每条命令前加sudo</p><h4 id="升级yum"><a href="#升级yum" class="headerlink" title="升级yum"></a>升级yum</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h4 id="卸载旧版本docker"><a href="#卸载旧版本docker" class="headerlink" title="卸载旧版本docker"></a>卸载旧版本docker</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h4 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum makecache fast</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">或</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.6部署前后端分离项目</title>
      <link href="/61854.html"/>
      <url>/61854.html</url>
      
        <content type="html"><![CDATA[<h4 id="在centos7-6上部署前后端分离项目Nginx反向代理vue-js2-6-Tornado5-1-1，使用supervisor统一管理服务"><a href="#在centos7-6上部署前后端分离项目Nginx反向代理vue-js2-6-Tornado5-1-1，使用supervisor统一管理服务" class="headerlink" title="在centos7.6上部署前后端分离项目Nginx反向代理vue.js2.6+Tornado5.1.1，使用supervisor统一管理服务"></a>在centos7.6上部署前后端分离项目Nginx反向代理vue.js2.6+Tornado5.1.1，使用supervisor统一管理服务</h4><p>这一次使用vue.js+tornado的组合来部署前后端分离的web项目，vue.js不用说了，前端当红炸子鸡，泛用性非常广，无论是单页应用，还是混合式开发app，亦或是微信小程序开发，样样得心应手，tornado最近的风头有点被新锐框架sanic抢走了，但是作为老牌的异步非阻塞框架，其内置了支持epoll/kqueue 等高效网络库，而具备了处理高并发的能力并且开发效率也不低，这一次tornado作为承载后端压力的角色。</p><p>首先部署前端，将测试好的vue.js2.6项目打包，值得一提的是，在生产环境并不需要node.js服务，因为利用vue.js的特性可以对前端页面进行打包，使其成为一个纯静态页包，上线后利用nginx对其代理即可，既方便又安全。在项目目录下执行npm run build命令，在执行之前，先把conifg目录下index.js中的bulid配置../dist改成./dist<br><img src="/images/20190822.png" alt><br> 执行命令后，会在项目的config目录下的dist目录生成静态页，将dist目录上传到服务器的/root目录下</p><pre><code>运行 chmod 755 /root/dist 对项目文件授权然后，在线上安装nginx</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置源</span></span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/<span class="number">7</span>/noarch/RPMS/nginx-release-centos<span class="number">-7</span><span class="number">-0.</span>el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>服务器需要暴露80端口，此时，测试一下，看看能否显示欢迎页<br><img src="/images/201908221.png" alt><br>没有问题，这时修改一下nginx 配置文件 vim /etc/nginx/conf.d/default.conf  增加下面的配置，这里前端服务默认监听80端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    access_log      /root/md_vue_access.log;</span><br><span class="line">    error_log       /root/md_vue_error.log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    client_max_body_size <span class="number">75</span>M;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">        root /root/dist;</span><br><span class="line">        index index.html;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_log    /root/dist/error.log    error;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#继续修改配置</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">将第一行改为 user root;</span><br></pre></td></tr></table></figure><p>改好后,重启nginx服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br><span class="line">或</span><br><span class="line">systemctl reload nginx.service</span><br></pre></td></tr></table></figure><p>每次修改nginx配置一定要重启服务，否则修改不会生效<br>访问80端口，看看效果</p><p>将tornado项目上传到/root/mytornado下，修改项目权限:chmod -R 755 /root/mytornado 然后将项目的debug模式关闭，并且修改端口号为8001，同时阿里云暴露8001端口，进行项目根目录，启动服务:python3 server.py，检查一下</p><p>没有问题，此时修改nginx配置文件，用nginx对tornado进行反向代理，新建一个配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/tornado.conf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">upstream tornado &#123;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   <span class="number">8000</span>;</span><br><span class="line">    root /root/mytornado;</span><br><span class="line">    index server.py index.html;</span><br><span class="line"></span><br><span class="line">    server_name server;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 静态文件直接由Nginx处理</span></span><br><span class="line">    location /static/&#123;</span><br><span class="line">        alias /root/mytornado/static/;</span><br><span class="line">        expires <span class="number">24</span>h;</span><br><span class="line">    &#125;</span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass_header Server;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        <span class="comment"># 把请求方向代理传给tornado服务器，负载均衡</span></span><br><span class="line">        proxy_pass http://tornado;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置的意思就是由nginx监听8000端口，并且将请求反向代理至tornado服务，这里我们只起了一个8001的服务，还可以启动更多，这就是传统意义上的负载均衡</p><p>重启一下nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br><span class="line">或</span><br><span class="line">systemctl reload nginx.service</span><br></pre></td></tr></table></figure><p>重启完毕，访问服务器的8000端口</p><p>最后，每次手动在命令行启动应用是比较麻烦的，我们还需要一个能够方便的管理服务进程的工具，包括自动重启进程等，而Supervisor的作用在这里就可以体现了。我们使用它来管理这个Tornado web server相关的进程</p><pre><code>安装supervisor</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure><p>生成配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><p>修改配置文件<br>    vim /etc/supervisord.conf  将下面几行注释解开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=*:<span class="number">9001</span>        ; (ip_address:port specifier, *:port <span class="keyword">for</span> all iface)</span><br><span class="line">username=user              ; (default <span class="keyword">is</span> no username (open server))</span><br><span class="line">password=<span class="number">123</span>               ; (default <span class="keyword">is</span> no password (open server))</span><br></pre></td></tr></table></figure><p>意思是将web服务器页面打开，需要注意ip地址要写*，否则外网访问不了，而username和password就是登陆页面的用户名和密码，可以改的复杂一点，另外服务器也要暴露一下9001端口<br>然后在配置文件末尾添加tornado的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:mytornado]</span><br><span class="line">command=python3 /root/mytornado/server.py --port=<span class="number">8001</span></span><br><span class="line">directory=/root/mytornado</span><br><span class="line">autorestart=true</span><br><span class="line">redirect_stderr=true</span><br></pre></td></tr></table></figure><p>保存完成后，启动supervisor服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><p>此时，将刚刚手动启动的tornado服务关闭，然后访问服务器的9001端口，用配置文件的用户名和密码登录。<br><img src="/images/20190823024429_56609.png" alt><br>这样就可以在管理页面中控制tornado服务了，同时supervisor还赋予了守护进程模式，方便服务拉起<br>需要注意的是，当修改supervisor配置，想要生效就得重启supervisor服务，终止服务命令是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -s INT /usr/bin/python</span><br></pre></td></tr></table></figure><p>因为supervisor是基于python2的，所以不用担心python3的进程<br>另外想用命令控制tornado也是可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止tornado服务</span></span><br><span class="line">supervisorctl stop mytornado</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动tornado服务</span></span><br><span class="line">supervisorctl start mytornado</span><br></pre></td></tr></table></figure><p>至此，我们通过nginx反向代理tornado负载均衡，并且通过supervisor管理就部署好了，简直太简单了</p>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.6安装redis</title>
      <link href="/19947.html"/>
      <url>/19947.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br><span class="line"></span><br><span class="line">启动服务</span><br><span class="line">systemctl start redis</span><br><span class="line"></span><br><span class="line">查看版本号</span><br><span class="line">redis-cli --version</span><br><span class="line"></span><br><span class="line">设置开机启动</span><br><span class="line">systemctl enable redis.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.6安装mysql5.7</title>
      <link href="/24753.html"/>
      <url>/24753.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class="line"></span><br><span class="line">rpm -Uvh mysql57-community-release-el7<span class="number">-11.</span>noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment">#查看服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line">查看数据库密码</span><br><span class="line">grep <span class="string">'temporary password'</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">然后利用这个密码进入mysql命令行 mysql -uroot -p查到的密码</span><br><span class="line"></span><br><span class="line">SET PASSWORD = PASSWORD(<span class="string">'Admin123!'</span>);</span><br><span class="line"></span><br><span class="line">设置远程登录</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'Admin123!'</span> WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">在[mysqld]下面添加，不需要分号</span><br><span class="line">字符集:注意是utf8而不是utf<span class="number">-8</span>!</span><br><span class="line">character-set-server=utf8</span><br><span class="line">这时候使用show variables like <span class="string">'char%'</span>;就可以查看到字符集都是utf8了</span><br><span class="line">sql支持group by语句</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">设置时区为东八区</span><br><span class="line">default-time_zone = <span class="string">'+8:00'</span></span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line">设置开机启动</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">如果需要更改为简单的密码</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>停止mysql服务</span><br><span class="line"></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>修改配置文件无密码登录</span><br><span class="line"></span><br><span class="line">vim  /etc/my.cnf</span><br><span class="line"></span><br><span class="line">在最后加上</span><br><span class="line"></span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line">保存</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>启动mysql</span><br><span class="line"></span><br><span class="line">systemctl  start  mysqld.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>登录mysql</span><br><span class="line"></span><br><span class="line">mysql -u root</span><br><span class="line"></span><br><span class="line">注意这里不要加-p</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>修改密码，mysql5<span class="number">.7</span>用此语法</span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line">update mysql.user set authentication_string=password(<span class="string">'123456'</span>) where user=<span class="string">'root'</span> ;  </span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>回到第二部把刚加的那句删掉</span><br><span class="line"></span><br><span class="line">保存，重启mysql就可以了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 永久性设置pip清华源</title>
      <link href="/61512.html"/>
      <url>/61512.html</url>
      
        <content type="html"><![CDATA[<p>在用户根目录(<del>,而非系统根目录/)下添加配置</del>/.pip/pip.conf目录添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">cd .pip</span><br><span class="line">vim pip.conf</span><br></pre></td></tr></table></figure><p>设置pip源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cm/simple</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.6安装anocanda</title>
      <link href="/19112.html"/>
      <url>/19112.html</url>
      
        <content type="html"><![CDATA[<p>安装步骤:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  https://repo.anaconda.com/archive/Anaconda3<span class="number">-2019.03</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>(提示错误可执行:yum install -y bzip2)</p><p>添加环境变量:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.bashrc</span><br><span class="line"></span><br><span class="line">export PATH=<span class="string">"/root/anaconda3/bin:$PATH"</span></span><br><span class="line"></span><br><span class="line">export PATH=<span class="string">"/root/anaconda3/bin/python:$PATH"</span></span><br></pre></td></tr></table></figure><p>保存后,生效配置文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><p>如果有python2与python3并存问题,可修改软连接来处理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv  /usr/bin/python /usr/bin/python.bak</span><br><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br><span class="line">mv /usr/bin/pip /usr/bin/pip.bak</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure><p>验证：python，会出python3<br>验证：pip，会调用pip3</p>]]></content>
      
      
      <categories>
          
          <category> Centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 安装xampp</title>
      <link href="/38596.html"/>
      <url>/38596.html</url>
      
        <content type="html"><![CDATA[<h3 id="记得先备份数据库表"><a href="#记得先备份数据库表" class="headerlink" title="记得先备份数据库表"></a>记得先备份数据库表</h3><h3 id="首先删除环境变量："><a href="#首先删除环境变量：" class="headerlink" title="首先删除环境变量："></a>首先删除环境变量：</h3><p>​    此电脑–&gt;右键–&gt;属性–&gt;左侧高级系统设置–&gt;环境变量–&gt;用户变量里的PATH    找到配置的mysql删除</p><h3 id="第二步-删除安装文件夹"><a href="#第二步-删除安装文件夹" class="headerlink" title="第二步 删除安装文件夹"></a>第二步 删除安装文件夹</h3><p>​    找到你所安装的mysql文件夹全部删除</p><h3 id="第三步-删除注册表-这里使用命令"><a href="#第三步-删除注册表-这里使用命令" class="headerlink" title="第三步 删除注册表(这里使用命令)"></a>第三步 删除注册表(这里使用命令)</h3><p>​    以管理员(否则没有权限删除)身份进入终端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc query mysql     查找电脑是否还存在mysql</span><br><span class="line">sc delete mysql    删除</span><br></pre></td></tr></table></figure><h3 id="第四步-安装xampp客户端"><a href="#第四步-安装xampp客户端" class="headerlink" title="第四步 安装xampp客户端"></a>第四步 安装xampp客户端</h3><p>​    这里傻瓜式安装就可以</p><p>​    安装完成后在xampp会有mysql文件夹,点击进入找到bin目录，复制路径</p><p>​    配置环境变量(同上将删除换成新增,粘贴就ok)</p><h3 id="第五步-尝试点击xampp中mysql-start启动mysql服务"><a href="#第五步-尝试点击xampp中mysql-start启动mysql服务" class="headerlink" title="第五步 尝试点击xampp中mysql start启动mysql服务"></a>第五步 尝试点击xampp中mysql start启动mysql服务</h3><h3 id="第六步-将mysql服务设置为自启动"><a href="#第六步-将mysql服务设置为自启动" class="headerlink" title="第六步 将mysql服务设置为自启动"></a>第六步 将mysql服务设置为自启动</h3><p>​    xampp安装目录找到xampp-control.exe右键已管理员身份进入</p><p>​    将mysql红色的X号点击变为对勾</p><p>完成操作。。。。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习入门</title>
      <link href="/62760.html"/>
      <url>/62760.html</url>
      
        <content type="html"><![CDATA[<h4 id="认识机器学习"><a href="#认识机器学习" class="headerlink" title="认识机器学习"></a>认识机器学习</h4><p>Anaconda   多版本python管理工具</p><p>自带jupyter  notebook    在浏览器里写代码  现在基本就是jupyter lab</p><h2 id="Jupyter-lab-使用："><a href="#Jupyter-lab-使用：" class="headerlink" title="Jupyter lab 使用："></a>Jupyter lab 使用：</h2><p>cmd下 jupter lab自动弹出</p><p>ctrl+enter   运行代码</p><p>esc+a    这两行中间新建一行</p><p>B   在下方插入新单元</p><p>A   在上方插入</p><p>注释  </p><p>首先  #这是注释    然后ctrl+shift+减号  然后esc取消编辑状态  然后数字2   在shift+回车</p><p>删除整行   dd</p><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>是个科学计算库，重在数值计算，主要用于多维数组（矩阵）处理的库，用来存储和处理大型矩阵，比python自身的嵌套列表结构要高效的多，本身是c语言写成</p><p><font color="red">ndarray</font>多维数组</p><p>是最基本的numpy数据类型</p><p>ndarray数组是一个多维的数组对象（矩阵），成为ndarray，具有矢量算数运算能力和复杂的广播能力，并具有执行速度快和节省空间的特点</p><p>ndarray的下标从0开始，切数组里的所有元素必须是相同类型</p><p><font color="red">一维数据大致为</font>：[1,2,3,4]    1*4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">1000</span>)     <span class="comment"># 生成0-999的一维数据</span></span><br><span class="line"></span><br><span class="line">data</span><br><span class="line"></span><br><span class="line">type(data)</span><br><span class="line"></span><br><span class="line">类型为numpy.ndarray  （高维数组类型）</span><br><span class="line"></span><br><span class="line">print(data.shape)    <span class="comment">#1000个数据</span></span><br><span class="line"></span><br><span class="line">print(data.ndim)     <span class="comment">#查看高维数组的维度</span></span><br></pre></td></tr></table></figure><p><font color="red">二维数组</font>：[[1,2,3],[11,22,33]]   2*3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]])</span><br><span class="line"></span><br><span class="line">data.shape</span><br><span class="line"></span><br><span class="line">data.ndim</span><br></pre></td></tr></table></figure><p><font color="red">三维数组</font>：[[[1,2],[2,3],[3,4]]]   1<em>3</em>2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.array([[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>]]])</span><br><span class="line"></span><br><span class="line">print(data.shape)</span><br></pre></td></tr></table></figure><p><font color="red">reshape</font>可以将一个一维的数组改变他的维度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">data = np.array([1,2,3,4,5,6])</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line"></span><br><span class="line">\# print(data.reshape(2,3))</span><br></pre></td></tr></table></figure><p>利用reshape将一个集合numpy数组生成2X10的高维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">1</span>,<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">data.reshape(<span class="number">2</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="列表转换高维数据"><a href="#列表转换高维数据" class="headerlink" title="列表转换高维数据"></a>列表转换高维数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">\<span class="comment">#list---&gt;np</span></span><br><span class="line"></span><br><span class="line">stulist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">data = np.array(stulist)</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">print(type(data))</span><br><span class="line"></span><br><span class="line">列表有逗号    高维没有逗号</span><br></pre></td></tr></table></figure><h2 id="高维转换列表"><a href="#高维转换列表" class="headerlink" title="高维转换列表"></a>高维转换列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">\<span class="comment"># np---&gt;list</span></span><br><span class="line"></span><br><span class="line">data = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">data.tolist()</span><br></pre></td></tr></table></figure><p>np.sum()，返回求和 </p><p>np.mean()，返回均值 </p><p>np.max()，返回最大值 </p><p>np.min()，返回最小值 </p><p>np.std()，返回标准偏差（standard deviation）:(平均值u) 在描述一个波动范围时标准差比方差更方便 </p><p>np.var()，返回方差（variance）:用来度量随机变量(x1…)和其数学期望（即均值x）之间的偏离程度 标注差和方差都是，反映的是一维数组的离散程度 </p><p>np.cumsum()，返回累加值 </p><p>np.cumprod()，返回累乘积值</p><p>random随机生成数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">\<span class="comment">#np.random 模块</span></span><br><span class="line"></span><br><span class="line">data = np.random.randint(<span class="number">10</span>,<span class="number">20</span>,size=(<span class="number">5</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">data</span><br></pre></td></tr></table></figure><h3 id="随机种子，因为是随机数，数组会变，随机种子会固定随机数"><a href="#随机种子，因为是随机数，数组会变，随机种子会固定随机数" class="headerlink" title="随机种子，因为是随机数，数组会变，随机种子会固定随机数"></a>随机种子，因为是随机数，数组会变，随机种子会固定随机数</h3><p>Np.random.seed(10)</p><p>r_   行与行相加  列数必须相同  否则报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">\<span class="comment">#np.random 模块</span></span><br><span class="line"></span><br><span class="line">data = np.random.randint(<span class="number">10</span>,<span class="number">20</span>,size=(<span class="number">5</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">data1 = np.random.randint(<span class="number">10</span>,<span class="number">20</span>,size=(<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(data.shape)</span><br><span class="line"></span><br><span class="line">print(data1.shape)</span><br><span class="line"></span><br><span class="line">print(np.r_[data,data1].shape)   <span class="comment">#行数相加</span></span><br></pre></td></tr></table></figure><p>c_  列与列相加  行数必须相同  否则报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">\<span class="comment">#np.random 模块</span></span><br><span class="line"></span><br><span class="line">data = np.random.randint(<span class="number">10</span>,<span class="number">20</span>,size=(<span class="number">5</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">data1 = np.random.randint(<span class="number">10</span>,<span class="number">20</span>,size=(<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">data2 = np.random.randint(<span class="number">10</span>,<span class="number">20</span>,size=(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">print(data1.shape)</span><br><span class="line"></span><br><span class="line">print(np.c_[data1,data2].shape)   <span class="comment">#列数相加</span></span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randint(<span class="number">10</span>,<span class="number">30</span>,size=(<span class="number">5</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">print(data[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(data[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h2 id="Linspace-生成等分数据"><a href="#Linspace-生成等分数据" class="headerlink" title="Linspace   生成等分数据"></a>Linspace   生成等分数据</h2><p>print(np.linspace(10,21,10))   #生成等分数据</p><p>结果为：</p><p>[10.         11.22222222 12.44444444 13.66666667 14.88888889 16.11111111<br>  17.33333333 18.55555556 19.77777778 21.        ]</p><p>Random,randn()    生成正太分布数据</p><p>Random.normal()   把均值为0，方差为1的数据分布，称为标准正太分布</p><p>data4 = np.random.normal(loc=0,scale=1,size=(20,30))</p><p>print(data4)</p><p>print(np.std(data4))  #标准差为1</p><p>print(np.var(data4))</p><p>print(np.mean(data4))  #均值为0</p><h1 id="Pandas-两种数据类型"><a href="#Pandas-两种数据类型" class="headerlink" title="Pandas  两种数据类型:"></a>Pandas  两种数据类型:</h1><p>处理表格型属性，</p><h2 id="Series-存放一维度数据-自带下标"><a href="#Series-存放一维度数据-自带下标" class="headerlink" title="Series    存放一维度数据    自带下标"></a>Series    存放一维度数据    自带下标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">data1</span><br></pre></td></tr></table></figure><p>结果：</p><p>0    1</p><p>1    2</p><p>2    3 </p><p>3    4</p><p>4    5</p><p>5    6</p><p>dtype: int64</p><h2 id="DataFrame-存放二维度数据"><a href="#DataFrame-存放二维度数据" class="headerlink" title="DataFrame    存放二维度数据"></a>DataFrame    存放二维度数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">data2 = pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">Data2</span><br><span class="line"></span><br><span class="line">columns给列起别名</span><br><span class="line"></span><br><span class="line">data2 = pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Info()   head()   tail()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">\<span class="comment">#series</span></span><br><span class="line"></span><br><span class="line">data1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">\<span class="comment">#DataFrame</span></span><br><span class="line"></span><br><span class="line">data2 = pd.DataFrame(np.random.randint(<span class="number">24</span>,size=(<span class="number">6</span>,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">data2</span><br><span class="line"></span><br><span class="line">print(data2.info())</span><br><span class="line"></span><br><span class="line">print(data2.head())   <span class="comment">#打印行    默认五行</span></span><br><span class="line"></span><br><span class="line">print(data2.tail())   <span class="comment">#打印尾部    默认五行</span></span><br></pre></td></tr></table></figure><h3 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h3><p>data.sort_index() :按照索引排序，默认升序</p><p>data.sort_values():按照‘列名’排序（多列可用 [‘a’,’b’…. ]），默认升序</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>Pd.read  </p><p>读取csv文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'51job.csv'</span>,encoding=<span class="string">'ANSI'</span>)</span><br><span class="line"></span><br><span class="line">data</span><br></pre></td></tr></table></figure><p> #encoding指定编码格式    如果不需要头部显示加上参数header=none   </p><p>取值：data.values</p><p>Data.index = range()    改变了标签数</p><p>Loc：行标签进行取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'51job.csv'</span>,encoding=<span class="string">'ANSI'</span>)</span><br><span class="line"></span><br><span class="line">data.index = range(<span class="number">10</span>,<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">data.loc[[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br></pre></td></tr></table></figure><h2 id="iloc：行索引进行取值-一般用切片"><a href="#iloc：行索引进行取值-一般用切片" class="headerlink" title="iloc：行索引进行取值  一般用切片"></a>iloc：行索引进行取值  一般用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'51job.csv'</span>,encoding=<span class="string">'ANSI'</span>)</span><br><span class="line"></span><br><span class="line">data.index = range(<span class="number">10</span>,<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">data.iloc[<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>直接根据索引取值，不用管标签</p><p>Data[‘ 字段名’]     直接取出列数据</p><p>比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'51job.csv'</span>,encoding=<span class="string">'ANSI'</span>)</span><br><span class="line"></span><br><span class="line">data.index = range(<span class="number">10</span>,<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">取出工资大于<span class="number">1000</span>   并且只展示时间</span><br><span class="line"></span><br><span class="line">data[data[<span class="string">'salary'</span>] &gt; <span class="number">1000</span>][<span class="string">'date'</span>]</span><br></pre></td></tr></table></figure><p>已utf8的方式写入</p><p>Data.to_csv(‘kuaidaili.csv’,encoding=’utf-8’)</p><p>再次查看使用utf8格式读取</p><p>缺失值的处理：</p><p>删除缺失值：data.dropna()</p><p>删除为空的数据，是整条数据</p><p>但是并不是同步源文件      需要加上inplace=True  修改元数据</p><h3 id="通过索引删除："><a href="#通过索引删除：" class="headerlink" title="通过索引删除："></a>通过索引删除：</h3><p># drop.drop(1)</p><p>data.drop([1,2,3,4])</p><p>填充某一列：data[‘salary’].fillna(11111)</p><p>用均值填充某一列数据：data[‘salary’].fillna(data[‘salary’].mean())</p><p>读取网络：只能解析table标签,不能太频繁(time.sleep)</p><p>Data = Read_html(‘网址‘)</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>stu是要连接的那个库名</p><p>Read_sql(host=’127.0.0.1’,port=3306,user=’root’,password=’’,db=’stu’)</p><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib:"></a>Matplotlib:</h1><ul><li>s：点的大小，默认20</li><li>c：点的取色序列，默认蓝色</li><li>marker：点的形状，默认是圆（具体的点的形状可以在matplotlib的官网中搜索markers查看。）</li><li>alpha：点的透明度          0-1</li><li>edgecolors：边缘颜色</li></ul><p>from matplotlib import pyplot as plt</p><h3 id="中文设置"><a href="#中文设置" class="headerlink" title="中文设置"></a>中文设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br></pre></td></tr></table></figure><h3 id="柱状图-bar"><a href="#柱状图-bar" class="headerlink" title="柱状图  bar()"></a>柱状图  bar()</h3><p>label图例名</p><p>第一个参数为x轴，第二个为y轴</p><p>plt.bar(range(5),[100,200,100,400,500],color=’g’,label=’柱状’)</p><p>#x轴标记</p><p>plt.xlabel(‘x’)</p><p>y轴标记</p><p>plt.ylabel(‘y’)</p><p>#x轴刻度    给x轴起别名 </p><p>plt.xticks(range(5),[‘A’,’B’,’C’,’D’,’E’])</p><h3 id="折线"><a href="#折线" class="headerlink" title="折线"></a>折线</h3><p>plt.plot([100,200,100,500,400],color=’r’,label=’折线’)</p><h3 id="绘制图例"><a href="#绘制图例" class="headerlink" title="绘制图例"></a>绘制图例</h3><p>plt.legend()</p><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>from matplotlib import pyplot as plt</p><p>#第一个参数为横轴，第二个为纵轴</p><p>参数：marker=’’   给点样式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>])</span><br><span class="line"></span><br><span class="line">plt.scatter([<span class="number">20</span>,<span class="number">1</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">3</span>],[<span class="number">12</span>,<span class="number">20</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line">plt.scatter([<span class="number">10</span>,<span class="number">23</span>,<span class="number">48</span>,<span class="number">23</span>,<span class="number">42</span>],[<span class="number">20</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">10</span>])</span><br></pre></td></tr></table></figure><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><p>labels给每一块起名，autopct显示百分比</p><p>plt.pie([100,200,300,400,500],labels=[‘A’,’B’,’C’,’D’,’E’],autopct=’%1.1f%%’)</p><h3 id="直方图-反应的格式"><a href="#直方图-反应的格式" class="headerlink" title="直方图   反应的格式"></a>直方图   反应的格式</h3><p>plt.hist([100,200,300,400,100])</p><p>如果参数里两个数一样，则y轴数为2</p><p>#初始化一张画布</p><p>plt.figure(figsize=(30,30))</p><p>在每张图上加上这个  参数为坐标</p><p>plt.subplot(221)</p><h2 id="决策树："><a href="#决策树：" class="headerlink" title="决策树："></a>决策树：</h2><p>一般x轴称为特征，y轴称为标签   统称为数据集</p><p>根据样本数据有无标签，分为监督学习和无监督学习</p><p>监督学习就是有标签，无监督就是无标签</p><p>监督学习里包含：回归，分类</p><p>无监督包含：聚类</p><p>回归：根据往年数据（比如房屋信息）预测未来的价格</p><p>sklearn机器学习库  datasets数据集模块</p><p>#导入数据集模块</p><p>from sklearn import datasets</p><p>#波士顿房价数据集</p><p>house = datasets.load_boston()</p><p>house</p><p>打印的数据：data为数据  target是字段名  target为标签</p><p>流程：数据–分析–数据预处理（统计学）–分割（37或28）–选择模型–训练模型</p><p>波士顿房价预测：</p><p>#导入数据集模块</p><p>from sklearn import datasets</p><p>#分割数据模块</p><p>from sklearn.model_selection import train_test_split</p><p>#决策树回归模型</p><p>from sklearn.tree import DecisionTreeRegressor</p><h3 id="波士顿房价数据集"><a href="#波士顿房价数据集" class="headerlink" title="波士顿房价数据集"></a>波士顿房价数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">house = datasets.load_boston()</span><br><span class="line"></span><br><span class="line">\<span class="comment">#取出特征数据</span></span><br><span class="line"></span><br><span class="line">dataset_x = house.data</span><br><span class="line"></span><br><span class="line">\<span class="comment">#取出对应的标签</span></span><br><span class="line"></span><br><span class="line">dataset_y = house.target</span><br><span class="line"></span><br><span class="line">\<span class="comment">#分割(训练集，测试集)</span></span><br><span class="line"></span><br><span class="line">train_x,test_x,train_y,test_y = train_test_split(dataset_x,dataset_y,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># print(train_x.shape)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># print(test_x.shape)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#训练模型（建模） 此处使用决策树回归模型</span></span><br><span class="line"></span><br><span class="line">dtreg = DecisionTreeRegressor()<span class="comment">#初始化</span></span><br><span class="line"></span><br><span class="line">dtreg.fit(train_x,train_y)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#预测数据</span></span><br><span class="line"></span><br><span class="line">y_pre = dtreg.predict(test_x)</span><br><span class="line"></span><br><span class="line">print(train_y)  <span class="comment">#真实值</span></span><br><span class="line"></span><br><span class="line">print(y_pre)   <span class="comment">#预测值</span></span><br><span class="line"></span><br><span class="line">决策树的可视化：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line">\<span class="comment">#将模型中节点信息导出</span></span><br><span class="line"></span><br><span class="line">dot_data = tree.export_graphviz(dtreg,out_file=<span class="literal">None</span>,filled=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#将决策树节点信息加入到graphviz（绘制）</span></span><br><span class="line"></span><br><span class="line">graph = graphviz.Source(dot_data)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#view导出数据并打开</span></span><br><span class="line"></span><br><span class="line">graph.render(<span class="string">'tree'</span>,view=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">回归模型评估：</span><br><span class="line"></span><br><span class="line">\<span class="comment">#回归模型的评估</span></span><br><span class="line"></span><br><span class="line">print(metrics.mean_squared_error(y_pred=y_pre,y_true=test_y))   <span class="comment">#测试集上的均方误差mse</span></span><br><span class="line"></span><br><span class="line">优化决策树：</span><br><span class="line"></span><br><span class="line">\<span class="comment">#优化决策树（集成算法：可以生成多颗决策树，通过将多个弱回归起组合成一个强回归器）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostRegressor</span><br><span class="line"></span><br><span class="line">\<span class="comment">#参数：弱回归器，最大弱回归器的数量</span></span><br><span class="line"></span><br><span class="line">dtreg = DecisionTreeRegressor(max_depth=<span class="number">5</span>) <span class="comment">#仅仅初始化模型，训练任务交给adaboostre</span></span><br><span class="line"></span><br><span class="line">adaboostre = AdaBoostRegressor(dtreg,n_estimators=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#训练数据</span></span><br><span class="line"></span><br><span class="line">adaboostre.fit(train_x,train_y)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#预测</span></span><br><span class="line"></span><br><span class="line">y_pre = adaboostre.predict(test_x)</span><br><span class="line"></span><br><span class="line">print(test_y)</span><br><span class="line"></span><br><span class="line">print(y_pre)</span><br><span class="line"></span><br><span class="line">print(metrics.mean_squared_error(y_pred=y_pre,y_true=test_y))</span><br></pre></td></tr></table></figure><h3 id="特征字典提取：jieba分词"><a href="#特征字典提取：jieba分词" class="headerlink" title="特征字典提取：jieba分词"></a>特征字典提取：jieba分词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">\<span class="comment">#全模式  cut_all = True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#标点符号视为空字符</span></span><br><span class="line"></span><br><span class="line">ret = jieba.lcut(<span class="string">'我叫苏杭,我来自宁夏,我现在喜欢python,我爱吃好吃的'</span>,cut_all=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#精确模式</span></span><br><span class="line"></span><br><span class="line">ret = jieba.lcut(<span class="string">'我叫苏杭,我来自宁夏,我现在喜欢python,我爱吃好吃的'</span>,cut_all=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#搜索引擎模式</span></span><br><span class="line"></span><br><span class="line">ret = jieba.lcut_for_search(<span class="string">'我叫苏杭,我来自宁夏,我现在喜欢python,我爱吃好吃的'</span>)</span><br><span class="line"></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">自定义词典：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">\<span class="comment">#自定义词典</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#加载词典</span></span><br><span class="line"></span><br><span class="line">jieba.load_userdict(<span class="string">'1.txt'</span>)</span><br><span class="line"></span><br><span class="line">ret = jieba.lcut(<span class="string">'老王杀了人,被法院判处无妻徒刑并没收个人全部财产,堂葫芦'</span>,cut_all=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">文件特征提取：</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1.字典特征提取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"></span><br><span class="line">dv = DictVectorizer()</span><br><span class="line"></span><br><span class="line">data = dv.fit_transform([&#123;<span class="string">'city'</span>:<span class="string">'beijing'</span>,<span class="string">'temperture'</span>:<span class="number">30</span>,<span class="string">'air'</span>:<span class="number">1</span>&#125;,</span><br><span class="line"></span><br><span class="line">​                        &#123;<span class="string">'city'</span>:<span class="string">'shanghai'</span>,<span class="string">'temperture'</span>:<span class="number">35</span>,<span class="string">'air'</span>:<span class="number">2</span>&#125;,</span><br><span class="line"></span><br><span class="line">​                        &#123;<span class="string">'city'</span>:<span class="string">'guangzhou'</span>,<span class="string">'temperture'</span>:<span class="number">33</span>,<span class="string">'air'</span>:<span class="number">3</span>&#125;])</span><br><span class="line"></span><br><span class="line">\<span class="comment">#相当于编码</span></span><br><span class="line"></span><br><span class="line">print(data.toarray())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#相当于解码</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># print(dv.transform([&#123;'city':'beijing','temperture':30&#125;]))</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># print(dv.inverse_transform([[0,1,0,33]]))</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment">#查看特征所对应的名字</span></span><br><span class="line"></span><br><span class="line">print(dv.get_feature_names())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tornado支付宝三方支付</title>
      <link href="/54584.html"/>
      <url>/54584.html</url>
      
        <content type="html"><![CDATA[<h4 id="支付宝实现三方支付"><a href="#支付宝实现三方支付" class="headerlink" title="支付宝实现三方支付"></a>支付宝实现三方支付</h4><p>新建支付宝一个沙箱应用  <a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>官方文档：<a href="https://openhome.alipay.com/developmentDocument.htm&gt;" target="_blank" rel="noopener">https://openhome.alipay.com/developmentDocument.htm&gt;</a></p><p>安装依赖库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><p>首先新建pay.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> decodebytes, encodebytes</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    支付宝支付接口(PC端支付接口)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, appid, app_notify_url, app_private_key_path,</span></span></span><br><span class="line"><span class="function"><span class="params">                 alipay_public_key_path, return_url, debug=False)</span>:</span></span><br><span class="line">        self.appid = appid</span><br><span class="line">        self.app_notify_url = app_notify_url</span><br><span class="line">        self.app_private_key_path = app_private_key_path</span><br><span class="line">        self.app_private_key = <span class="literal">None</span></span><br><span class="line">        self.return_url = return_url</span><br><span class="line">        <span class="keyword">with</span> open(self.app_private_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.app_private_key = RSA.importKey(fp.read())</span><br><span class="line">        self.alipay_public_key_path = alipay_public_key_path</span><br><span class="line">        <span class="keyword">with</span> open(self.alipay_public_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.alipay_public_key = RSA.importKey(fp.read())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> debug <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            self.__gateway = <span class="string">"https://openapi.alipaydev.com/gateway.do"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__gateway = <span class="string">"https://openapi.alipay.com/gateway.do"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">direct_pay</span><span class="params">(self, subject, out_trade_no, total_amount, return_url=None, **kwargs)</span>:</span></span><br><span class="line">        biz_content = &#123;</span><br><span class="line">            <span class="string">"subject"</span>: subject,</span><br><span class="line">            <span class="string">"out_trade_no"</span>: out_trade_no,</span><br><span class="line">            <span class="string">"total_amount"</span>: total_amount,</span><br><span class="line">            <span class="string">"product_code"</span>: <span class="string">"FAST_INSTANT_TRADE_PAY"</span>,</span><br><span class="line">            <span class="comment"># "qr_pay_mode":4</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        biz_content.update(kwargs)</span><br><span class="line">        data = self.build_body(<span class="string">"alipay.trade.page.pay"</span>, biz_content, self.return_url)</span><br><span class="line">        <span class="keyword">return</span> self.sign_data(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_body</span><span class="params">(self, method, biz_content, return_url=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"app_id"</span>: self.appid,</span><br><span class="line">            <span class="string">"method"</span>: method,</span><br><span class="line">            <span class="string">"charset"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line">            <span class="string">"sign_type"</span>: <span class="string">"RSA2"</span>,</span><br><span class="line">            <span class="string">"timestamp"</span>: datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>),</span><br><span class="line">            <span class="string">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"biz_content"</span>: biz_content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> return_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data[<span class="string">"notify_url"</span>] = self.app_notify_url</span><br><span class="line">            data[<span class="string">"return_url"</span>] = self.return_url</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        data.pop(<span class="string">"sign"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        unsigned_string = <span class="string">"&amp;"</span>.join(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        sign = self.sign(unsigned_string.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># ordered_items = self.ordered_data(data)</span></span><br><span class="line">        quoted_string = <span class="string">"&amp;"</span>.join(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(k, quote_plus(v)) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得最终的订单信息字符串</span></span><br><span class="line">        signed_string = quoted_string + <span class="string">"&amp;sign="</span> + quote_plus(sign)</span><br><span class="line">        <span class="keyword">return</span> signed_string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ordered_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        complex_keys = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">                complex_keys.append(key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字典类型的数据dump出来</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> complex_keys:</span><br><span class="line">            data[key] = json.dumps(data[key], separators=(<span class="string">','</span>, <span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sorted([(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> data.items()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(self, unsigned_string)</span>:</span></span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.app_private_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        signature = signer.sign(SHA256.new(unsigned_string))</span><br><span class="line">        <span class="comment"># base64 编码，转换为unicode表示并移除回车</span></span><br><span class="line">        sign = encodebytes(signature).decode(<span class="string">"utf8"</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_verify</span><span class="params">(self, raw_content, signature)</span>:</span></span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.alipay_public_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        digest = SHA256.new()</span><br><span class="line">        digest.update(raw_content.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">if</span> signer.verify(digest, decodebytes(signature.encode(<span class="string">"utf8"</span>))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(self, data, signature)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"sign_type"</span> <span class="keyword">in</span> data:</span><br><span class="line">            sign_type = data.pop(<span class="string">"sign_type"</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        message = <span class="string">"&amp;"</span>.join(<span class="string">u"&#123;&#125;=&#123;&#125;"</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        <span class="keyword">return</span> self._verify(message, signature)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#请求支付宝退款接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">api_alipay_trade_refund</span><span class="params">(self, refund_amount, out_trade_no=None, trade_no=None, **kwargs)</span>:</span></span><br><span class="line">        biz_content = &#123;</span><br><span class="line">            <span class="string">"refund_amount"</span>: refund_amount</span><br><span class="line">        &#125;</span><br><span class="line">        biz_content.update(**kwargs)</span><br><span class="line">        <span class="keyword">if</span> out_trade_no:</span><br><span class="line">            biz_content[<span class="string">"out_trade_no"</span>] = out_trade_no</span><br><span class="line">        <span class="keyword">if</span> trade_no:</span><br><span class="line">            biz_content[<span class="string">"trade_no"</span>] = trade_no</span><br><span class="line">        data = self.build_body(<span class="string">"alipay.trade.refund"</span>, biz_content)</span><br><span class="line">        url = self.__gateway + <span class="string">"?"</span> + self.sign_data(data)</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        html = r.content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><p>调用类中方法进行请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#支付宝支付</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayPageHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 根据当前用户的配置，生成URL，并跳转。</span></span><br><span class="line">        money = self.get_argument(<span class="string">'money'</span>,<span class="string">''</span>)</span><br><span class="line">        a = float(money)</span><br><span class="line">        b = round(a,<span class="number">2</span>)</span><br><span class="line">        total = self.get_argument(<span class="string">'total'</span>,<span class="string">''</span>)</span><br><span class="line">        goodlist = self.get_argument(<span class="string">'cartlist'</span>,<span class="string">''</span>)</span><br><span class="line">        id = self.get_argument(<span class="string">'id'</span>,<span class="string">''</span>)</span><br><span class="line">        alipay = get_ali_object()</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        sj = []</span><br><span class="line">        sj = <span class="string">''</span>.join(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> random.sample(range(<span class="number">0</span>,<span class="number">9</span>),j)) <span class="comment">#随机数 </span></span><br><span class="line">        <span class="comment"># 生成支付的url</span></span><br><span class="line">        <span class="keyword">if</span> id != <span class="string">''</span>:</span><br><span class="line">            query_params = alipay.direct_pay(</span><br><span class="line">                subject=<span class="string">"美多购物"</span>,  <span class="comment"># 商品简单描述</span></span><br><span class="line">                out_trade_no = id, <span class="comment">#sj + str(get_order_code()),  # 用户购买的商品订单号（每次不一样） 20180301073422891</span></span><br><span class="line">                total_amount = b,  <span class="comment"># 抵扣后需支付金额(单位: 元 保留俩位小数)</span></span><br><span class="line">            )</span><br><span class="line">            print(<span class="string">'111111'</span>)</span><br><span class="line">            pay_url = <span class="string">"https://openapi.alipaydev.com/gateway.do?&#123;0&#125;"</span>.format(query_params)  <span class="comment"># 支付宝网关地址（沙箱应用）</span></span><br><span class="line">            self.write(pay_url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query_params = alipay.direct_pay(</span><br><span class="line">                subject=<span class="string">"美多购物"</span>,  <span class="comment"># 商品简单描述</span></span><br><span class="line">                out_trade_no = sj + str(get_order_code()),  <span class="comment"># 用户购买的商品订单号（每次不一样） 20180301073422891</span></span><br><span class="line">                total_amount = b,  <span class="comment"># 抵扣后需支付金额(单位: 元 保留俩位小数)</span></span><br><span class="line">            )</span><br><span class="line">            print(<span class="string">'2222'</span>)</span><br><span class="line">            order = Order(</span><br><span class="line">                id = sj + str(get_order_code()), <span class="comment"># 用户购买的商品订单号</span></span><br><span class="line">                order_amount = money, <span class="comment"># 订单金额</span></span><br><span class="line">                )</span><br><span class="line">            session.add(order)</span><br><span class="line">            session.commit()</span><br><span class="line">            pay_url = <span class="string">"https://openapi.alipaydev.com/gateway.do?&#123;0&#125;"</span>.format(query_params)  <span class="comment"># 支付宝网关地址（沙箱应用）</span></span><br><span class="line">            self.write(pay_url)</span><br></pre></td></tr></table></figure><p>支付宝回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#支付宝回调</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayRetrunHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        params = self.request.arguments</span><br><span class="line">        print(params)</span><br><span class="line">        order = session.query(Order).filter(Order.id==str(params[<span class="string">'out_trade_no'</span>][<span class="number">0</span>],<span class="string">'utf-8'</span>)).first()</span><br><span class="line">        order.status = <span class="number">1</span></span><br><span class="line">        order.payment_amount = str(params[<span class="string">'total_amount'</span>][<span class="number">0</span>],<span class="string">'utf-8'</span>) <span class="comment"># 付款总额/实付金额</span></span><br><span class="line">        order.outer_traed_number = str(params[<span class="string">'trade_no'</span>][<span class="number">0</span>],<span class="string">'utf-8'</span>), <span class="comment"># 交易订单号</span></span><br><span class="line">        order.create_time = str(params[<span class="string">'timestamp'</span>][<span class="number">0</span>],<span class="string">'utf-8'</span>), <span class="comment"># 交易时间</span></span><br><span class="line">        session.commit()</span><br><span class="line">        self.redirect(<span class="string">'http://127.0.0.1:8080/checkout'</span>)</span><br></pre></td></tr></table></figure><p>支付宝之退款功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''支付宝退款'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Refund</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        id = self.get_argument(<span class="string">'id'</span>)</span><br><span class="line">        money = self.get_argument(<span class="string">'money'</span>)</span><br><span class="line">         <span class="comment">#实例化支付类</span></span><br><span class="line">        alipay = get_ali_object()</span><br><span class="line">        <span class="comment">#调用类中退款方法</span></span><br><span class="line">        order_string = alipay.api_alipay_trade_refund(</span><br><span class="line">            <span class="comment">#订单号，一定要注意，这是支付成功后返回的唯一订单号</span></span><br><span class="line">            out_trade_no = id,</span><br><span class="line">            <span class="comment">#退款金额，注意精确到分，不要超过订单支付总金额</span></span><br><span class="line">            refund_amount = money,</span><br><span class="line">            <span class="comment">#回调网址</span></span><br><span class="line">            notify_url = <span class="string">'http://localhost:8080/checkout'</span></span><br><span class="line">        )</span><br><span class="line">        orderone = session.query(Order).filter_by(id=id).first()</span><br><span class="line">        orderone.status = <span class="number">3</span></span><br><span class="line">        session.add(orderone)</span><br><span class="line">        session.commit()</span><br><span class="line">        self.write(json.dumps(&#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'退款成功'</span>&#125;,cls=AlchemyEncoder,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Tornado </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tornado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tornado新浪微博第三方登录</title>
      <link href="/10680.html"/>
      <url>/10680.html</url>
      
        <content type="html"><![CDATA[<p>申请成为新浪微博开发者流程</p><p>新建应用，获取appid和app密钥</p><p>具体流程：</p><p>​    <a href="https://blog.csdn.net/qq_42249896/article/details/87433349" target="_blank" rel="noopener">https://blog.csdn.net/qq_42249896/article/details/87433349</a></p><p>新浪微博拼接登录代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新浪微博登录地址组合返回（第一步）</span></span><br><span class="line"><span class="string">'''调用微博登录'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinaFirstHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#微博接口地址</span></span><br><span class="line">        weibo_auth_url = <span class="string">"https://api.weibo.com/oauth2/authorize"</span></span><br><span class="line">        <span class="comment">#回调网址</span></span><br><span class="line">        redirect_url = <span class="string">"http://127.0.0.1:8000/md_admin/weibo"</span></span><br><span class="line">        <span class="comment">#应用id</span></span><br><span class="line">        client_id = <span class="string">"2636039333"</span></span><br><span class="line">        <span class="comment">#组合url</span></span><br><span class="line">        auth_url = weibo_auth_url + <span class="string">"?client_id=&#123;client_id&#125;&amp;redirect_uri=&#123;re_url&#125;"</span>.format(client_id=client_id,</span><br><span class="line">                                                                                        re_url=redirect_url)</span><br><span class="line">        self.write(auth_url)</span><br></pre></td></tr></table></figure><p>新浪微博回调代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新浪微博回调地址（第二步）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinaBackHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#获取回调的code</span></span><br><span class="line">        code = self.get_argument(<span class="string">'code'</span>)</span><br><span class="line">        <span class="comment">#微博认证地址</span></span><br><span class="line">        access_token_url = <span class="string">"https://api.weibo.com/oauth2/access_token"</span></span><br><span class="line">        <span class="comment">#参数 向新浪接口发送请求</span></span><br><span class="line">        re_dict = requests.post(access_token_url,data=&#123;</span><br><span class="line">            <span class="string">"client_id"</span>: <span class="string">'2636039333'</span>,</span><br><span class="line">            <span class="string">"client_secret"</span>: <span class="string">"4e2fbdb39432c31dc5c2f90be3afa5ce"</span>,</span><br><span class="line">            <span class="string">"grant_type"</span>: <span class="string">"authorization_code"</span>,</span><br><span class="line">            <span class="string">"code"</span>: code,</span><br><span class="line">            <span class="string">"redirect_uri"</span>: <span class="string">"http://127.0.0.1:8000/md_admin/weibo"</span>,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        re_dict = re_dict.text</span><br><span class="line">        re_dict = eval(re_dict)</span><br><span class="line">        uid = re_dict.get(<span class="string">'uid'</span>)</span><br><span class="line">        <span class="keyword">if</span> uid:</span><br><span class="line">            user = User()</span><br><span class="line">            user.name = uid</span><br><span class="line">            user.social_attr = <span class="number">1</span></span><br><span class="line">            session.add(user)</span><br><span class="line">            session.commit()</span><br><span class="line"></span><br><span class="line">            user_ = session.query(User).filter_by(name=uid).first()</span><br><span class="line">            self.redirect(<span class="string">'http://localhost:8080/?uid=%s'</span> %(user_.id))</span><br></pre></td></tr></table></figure><h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><p>访问拼接地址获取登录地址-》在回调网址内判断新浪微博是否登录成功</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Tornado </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tornado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tornado入门指引</title>
      <link href="/28184.html"/>
      <url>/28184.html</url>
      
        <content type="html"><![CDATA[<p>Python的Web框架种类繁多（比Python语言的关键字还要多），但在众多优秀的Web框架中，Tornado框架最适合用来开发需要处理长连接和应对高并发的Web应用。Tornado框架在设计之初就考虑到性能问题，通过对非阻塞I/O和epoll（Linux 2.5.44内核引入的一种多路I/O复用方式，旨在实现高性能网络服务，在BSD和macOS中是kqueue）的运用，Tornado可以处理大量的并发连接，更轻松的应对C10K（万级并发）问题，是非常理想的实时通信Web框架。</p><blockquote><p>扩展：基于线程的Web服务器产品（如：Apache）会维护一个线程池来处理用户请求，当用户请求到达时就为该请求分配一个线程，如果线程池中没有空闲线程了，那么可以通过创建新的线程来应付新的请求，但前提是系统尚有空闲的内存空间，显然这种方式很容易将服务器的空闲内存耗尽（大多数Linux发行版本中，默认的线程栈大小为8M）。想象一下，如果我们要开发一个社交类应用，这类应用中，通常需要显示实时更新的消息、对象状态的变化和各种类型的通知，那也就意味着客户端需要保持请求连接来接收服务器的各种响应，在这种情况下，服务器上的工作线程很容易被耗尽，这也就意味着新的请求很有可能无法得到响应。</p></blockquote><p>Tornado框架源于FriendFeed网站，在FriendFeed网站被Facebook收购之后得以开源，正式发布的日期是2009年9月10日。Tornado能让你能够快速开发高速的Web应用，如果你想编写一个可扩展的社交应用、实时分析引擎，或RESTful API，那么Tornado框架就是很好的选择。Tornado其实不仅仅是一个Web开发的框架，它还是一个高性能的事件驱动网络访问引擎，内置了高性能的HTTP服务器和客户端（支持同步和异步请求），同时还对WebSocket提供了完美的支持。</p><p>了解和学习Tornado最好的资料就是它的官方文档，在<a href="http://www.tornadoweb.org" target="_blank" rel="noopener">tornadoweb.org</a>上面有很多不错的例子，你也可以在Github上找到Tornado的源代码和历史版本。</p><h3 id="5分钟上手Tornado"><a href="#5分钟上手Tornado" class="headerlink" title="5分钟上手Tornado"></a>5分钟上手Tornado</h3><ol><li><p>创建并激活虚拟环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello-tornado</span><br><span class="line">cd hello-tornado</span><br><span class="line">python3 -m venv venv</span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>安装Tornado。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure></li><li><p>编写Web应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">example01.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">'&lt;h1&gt;Hello, world!&lt;/h1&gt;'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = tornado.web.Application(handlers=[(<span class="string">r'/'</span>, MainHandler), ])</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>运行并访问应用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python example01.py</span><br></pre></td></tr></table></figure><p><img src="//yoursite.com/run-hello-world-app.png" alt></p></li></ol><p>在上面的例子中，代码example01.py通过定义一个继承自<code>RequestHandler</code>的类（<code>MainHandler</code>）来处理用户请求，当请求到达时，Tornado会实例化这个类（创建<code>MainHandler</code>对象），并调用与HTTP请求方法（GET、POST等）对应的方法，显然上面的<code>MainHandler</code>只能处理GET请求，在收到GET请求时，它会将一段HTML的内容写入到HTTP响应中。<code>main</code>函数的第1行代码创建了Tornado框架中<code>Application</code>类的实例，它代表了我们的Web应用，而创建该实例最为重要的参数就是<code>handlers</code>，该参数告知<code>Application</code>对象，当收到一个请求时应该通过哪个类的对象来处理这个请求。在上面的例子中，当通过HTTP的GET请求访问站点根路径时，就会调用<code>MainHandler</code>的<code>get</code>方法。 <code>main</code>函数的第2行代码通过<code>Application</code>对象的<code>listen</code>方法指定了监听HTTP请求的端口。<code>main</code>函数的第3行代码用于获取Tornado框架的<code>IOLoop</code>实例并启动它，该实例代表一个条件触发的I/O循环，用于持续的接收来自于客户端的请求。</p><blockquote><p>扩展：在Python 3中，<code>IOLoop</code>实例的本质就是<code>asyncio</code>的事件循环，该事件循环在非Windows系统中就是<code>SelectorEventLoop</code>对象，它基于<code>selectors</code>模块（高级I/O复用模块），会使用当前操作系统最高效的I/O复用选择器，例如在Linux环境下它使用<code>EpollSelector</code>，而在macOS和BSD环境下它使用的是<code>KqueueSelector</code>；在Python 2中，<code>IOLoop</code>直接使用<code>select</code>模块（低级I/O复用模块）的<code>epoll</code>或<code>kqueue</code>函数，如果这两种方式都不可用，则调用<code>select</code>函数实现多路I/O复用。当然，如果要支持高并发，你的系统最好能够支持epoll或者kqueue这两种多路I/O复用方式中的一种。</p></blockquote><p>如果希望通过命令行参数来指定Web应用的监听端口，可以对上面的代码稍作修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">example01.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options, parse_command_line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义默认端口</span></span><br><span class="line">define(<span class="string">'port'</span>, default=<span class="number">8000</span>, type=int)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">'&lt;h1&gt;Hello, world!&lt;/h1&gt;'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># python example01.py --port=8000</span></span><br><span class="line">    parse_command_line()</span><br><span class="line">    app = tornado.web.Application(handlers=[(<span class="string">r'/'</span>, MainHandler), ])</span><br><span class="line">    app.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在启动Web应用时，如果没有指定端口，将使用<code>define</code>函数中设置的默认端口8000，如果要指定端口，可以使用下面的方式来启动Web应用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python example01.py --port=8000</span><br></pre></td></tr></table></figure><h3 id="路由解析"><a href="#路由解析" class="headerlink" title="路由解析"></a>路由解析</h3><p>上面我们曾经提到过创建<code>Application</code>实例时需要指定<code>handlers</code>参数，这个参数非常重要，它应该是一个元组的列表，元组中的第一个元素是正则表达式，它用于匹配用户请求的资源路径；第二个元素是<code>RequestHandler</code>的子类。在刚才的例子中，我们只在<code>handlers</code>列表中放置了一个元组，事实上我们可以放置多个元组来匹配不同的请求（资源路径），而且可以使用正则表达式的捕获组来获取匹配的内容并将其作为参数传入到<code>get</code>、<code>post</code>这些方法中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">example02.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options, parse_command_line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义默认端口</span></span><br><span class="line">define(<span class="string">'port'</span>, default=<span class="number">8000</span>, type=int)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayingHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""自定义请求处理器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        sayings = [</span><br><span class="line">            <span class="string">'世上没有绝望的处境，只有对处境绝望的人'</span>,</span><br><span class="line">            <span class="string">'人生的道路在态度的岔口一分为二，从此通向成功或失败'</span>,</span><br><span class="line">            <span class="string">'所谓措手不及，不是说没有时间准备，而是有时间的时候没有准备'</span>,</span><br><span class="line">            <span class="string">'那些你认为不靠谱的人生里，充满你没有勇气做的事'</span>,</span><br><span class="line">            <span class="string">'在自己喜欢的时间里，按照自己喜欢的方式，去做自己喜欢做的事，这便是自由'</span>,</span><br><span class="line">            <span class="string">'有些人不属于自己，但是遇见了也弥足珍贵'</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># 渲染index.html模板页</span></span><br><span class="line">        self.render(<span class="string">'index.html'</span>, message=random.choice(sayings))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""自定义请求处理器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, city)</span>:</span></span><br><span class="line">        <span class="comment"># Tornado框架会自动处理百分号编码的问题</span></span><br><span class="line">        weathers = &#123;</span><br><span class="line">            <span class="string">'北京'</span>: &#123;<span class="string">'temperature'</span>: <span class="string">'-4~4'</span>, <span class="string">'pollution'</span>: <span class="string">'195 中度污染'</span>&#125;,</span><br><span class="line">            <span class="string">'成都'</span>: &#123;<span class="string">'temperature'</span>: <span class="string">'3~9'</span>, <span class="string">'pollution'</span>: <span class="string">'53 良'</span>&#125;,</span><br><span class="line">            <span class="string">'深圳'</span>: &#123;<span class="string">'temperature'</span>: <span class="string">'20~25'</span>, <span class="string">'pollution'</span>: <span class="string">'25 优'</span>&#125;,</span><br><span class="line">            <span class="string">'广州'</span>: &#123;<span class="string">'temperature'</span>: <span class="string">'18~23'</span>, <span class="string">'pollution'</span>: <span class="string">'56 良'</span>&#125;,</span><br><span class="line">            <span class="string">'上海'</span>: &#123;<span class="string">'temperature'</span>: <span class="string">'6~8'</span>, <span class="string">'pollution'</span>: <span class="string">'65 良'</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> city <span class="keyword">in</span> weathers:</span><br><span class="line">            self.render(<span class="string">'weather.html'</span>, city=city, weather=weathers[city])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.render(<span class="string">'index.html'</span>, message=<span class="string">f'没有<span class="subst">&#123;city&#125;</span>的天气信息'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""自定义请求处理器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 重定向到指定的路径</span></span><br><span class="line">        self.redirect(<span class="string">'/saying'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""主函数"""</span></span><br><span class="line">    parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        <span class="comment"># handlers是按列表中的顺序依次进行匹配的</span></span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r'/saying/?'</span>, SayingHandler),</span><br><span class="line">            (<span class="string">r'/weather/([^/]&#123;2,&#125;)/?'</span>, WeatherHandler),</span><br><span class="line">            (<span class="string">r'/.+'</span>, ErrorHandler),</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment"># 通过template_path参数设置模板页的路径</span></span><br><span class="line">        template_path=os.path.join(os.path.dirname(__file__), <span class="string">'templates'</span>)</span><br><span class="line">    )</span><br><span class="line">    app.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>模板页index.html。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Tornado基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板页weather.html。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- weather.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Tornado基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>温度：&#123;&#123;weather['temperature']&#125;&#125;摄氏度<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>污染指数：&#123;&#123;weather['pollution']&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Tornado的模板语法与其他的Web框架中使用的模板语法并没有什么实质性的区别，而且目前的Web应用开发更倡导使用前端渲染的方式来减轻服务器的负担，所以这里我们并不对模板语法和后端渲染进行深入的讲解。</p><h3 id="请求处理器"><a href="#请求处理器" class="headerlink" title="请求处理器"></a>请求处理器</h3><p>通过上面的代码可以看出，<code>RequestHandler</code>是处理用户请求的核心类，通过重写<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>等方法可以处理不同类型的HTTP请求，除了这些方法之外，<code>RequestHandler</code>还实现了很多重要的方法，下面是部分方法的列表：</p><ol><li><code>get_argument</code> / <code>get_arguments</code> / <code>get_body_argument</code> / <code>get_body_arguments</code> / <code>get_query_arugment</code> / <code>get_query_arguments</code>：获取请求参数。</li><li><code>set_status</code> / <code>send_error</code> / <code>set_header</code> / <code>add_header</code> / <code>clear_header</code> / <code>clear</code>：操作状态码和响应头。</li><li><code>write</code> / <code>flush</code> / <code>finish</code> / <code>write_error</code>：和输出相关的方法。</li><li><code>render</code> / <code>render_string</code>：渲染模板。</li><li><code>redirect</code>：请求重定向。</li><li><code>get_cookie</code> / <code>set_cookie</code> / <code>get_secure_cookie</code> / <code>set_secure_cookie</code> / <code>create_signed_value</code> / <code>clear_cookie</code> / <code>clear_all_cookies</code>：操作Cookie。</li></ol><p>我们用上面讲到的这些方法来完成下面的需求，访问页面时，如果Cookie中没有读取到用户信息则要求用户填写个人信息，如果从Cookie中读取到用户信息则直接显示用户信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">example03.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options, parse_command_line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义默认端口</span></span><br><span class="line">define(<span class="string">'port'</span>, default=<span class="number">8000</span>, type=int)</span><br><span class="line"></span><br><span class="line">users = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""用户"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nickname, gender, birthday)</span>:</span></span><br><span class="line">        self.nickname = nickname</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birthday = birthday</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""自定义请求处理器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 从Cookie中读取用户昵称</span></span><br><span class="line">        nickname = self.get_cookie(<span class="string">'nickname'</span>)</span><br><span class="line">        <span class="keyword">if</span> nickname <span class="keyword">in</span> users:</span><br><span class="line">            self.render(<span class="string">'userinfo.html'</span>, user=users[nickname])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.render(<span class="string">'userform.html'</span>, hint=<span class="string">'请填写个人信息'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""自定义请求处理器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 从表单参数中读取用户昵称、性别和生日信息</span></span><br><span class="line">        nickname = self.get_body_argument(<span class="string">'nickname'</span>).strip()</span><br><span class="line">        gender = self.get_body_argument(<span class="string">'gender'</span>)</span><br><span class="line">        birthday = self.get_body_argument(<span class="string">'birthday'</span>)</span><br><span class="line">        <span class="comment"># 检查用户昵称是否有效</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.fullmatch(<span class="string">r'\w&#123;6,20&#125;'</span>, nickname):</span><br><span class="line">            self.render(<span class="string">'userform.html'</span>, hint=<span class="string">'请输入有效的昵称'</span>)</span><br><span class="line">        <span class="keyword">elif</span> nickname <span class="keyword">in</span> users:</span><br><span class="line">            self.render(<span class="string">'userform.html'</span>, hint=<span class="string">'昵称已经被使用过'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[nickname] = User(nickname, gender, birthday)</span><br><span class="line">            <span class="comment"># 将用户昵称写入Cookie并设置有效期为7天</span></span><br><span class="line">            self.set_cookie(<span class="string">'nickname'</span>, nickname, expires_days=<span class="number">7</span>)</span><br><span class="line">            self.render(<span class="string">'userinfo.html'</span>, user=users[nickname])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""主函数"""</span></span><br><span class="line">    parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r'/'</span>, MainHandler), (<span class="string">r'/register'</span>, UserHandler)</span><br><span class="line">        ],</span><br><span class="line">        template_path=os.path.join(os.path.dirname(__file__), <span class="string">'templates'</span>)</span><br><span class="line">    )</span><br><span class="line">    app.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>模板页userform.html。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- userform.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tornado基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.em &#123; color: red; &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>填写用户信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"em"</span>&gt;</span>&#123;&#123;hint&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/register"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>昵称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"nickname"</span>&gt;</span></span><br><span class="line">（字母数字下划线，6-20个字符）</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>生日：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"1990-01-01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"确定"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板页userinfo.html。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- userinfo.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tornado基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>昵称：&#123;&#123;user.nickname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>性别：&#123;&#123;user.gender&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>出生日期：&#123;&#123;user.birthday&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Tornado </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tornado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加pdf插件</title>
      <link href="/39675.html"/>
      <url>/39675.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><h4 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-pdf --save</span><br></pre></td></tr></table></figure><h4 id="二、在页面中-md文件-添加pdf"><a href="#二、在页面中-md文件-添加pdf" class="headerlink" title="二、在页面中(md文件)添加pdf"></a>二、在页面中(md文件)添加pdf</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部链接：</span><br><span class="line">&#123;% pdf http://<span class="number">7</span>xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span><br><span class="line">本地连接：</span><br><span class="line">&#123;% pdf ./pdf名字.pdf %&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>直接在想添加的页面中(md文件)添加:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;object classid=<span class="string">'clsid:CA8A9780-280D-11CF-A24D-444553540000'</span> width=<span class="string">'600px'</span> height=<span class="string">'650px'</span>&gt;</span><br><span class="line">&lt;param name='SRC'value='你的pdf路径' /&gt;&lt;embed width='700' height='650' fullscreen='yes' src='你的pdf路径'&gt;&lt;noembed&gt;&lt;/noembed&gt;&lt;/embed&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo鼠标点击出现小桃心</title>
      <link href="/43500.html"/>
      <url>/43500.html</url>
      
        <content type="html"><![CDATA[<h4 id="第一步，新建click-js"><a href="#第一步，新建click-js" class="headerlink" title="第一步，新建click.js"></a>第一步，新建click.js</h4><p>在blog/themes/next/source/js目录下创建click.js文件，将下列代码复制进去</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><h4 id="第二步，在主页main代码中插入js文件"><a href="#第二步，在主页main代码中插入js文件" class="headerlink" title="第二步，在主页main代码中插入js文件"></a>第二步，在主页main代码中插入js文件</h4><p>打开blog/themes/next/layout/layout.ejs文件<br>插入js代码，代码为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" src="/js/click.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>像我这样，插入在下方即可<br><img src="/images/1567752949.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo生成唯一文章链接</title>
      <link href="/51108.html"/>
      <url>/51108.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>默认的，next生成文章链接：:year/:month/:day/:title，是按照年、月、日、标题来生成的<br>比如：<a href="https://leafjame.github.io/2019/08/12/hello-world/这样，如果文章标题是中文的话，URL链接也会是中文的" target="_blank" rel="noopener">https://leafjame.github.io/2019/08/12/hello-world/这样，如果文章标题是中文的话，URL链接也会是中文的</a><br><img src="/images/a.png" alt><br>复制后的链接是一大堆字符串编码</p><p><a href="http://localhost:4000/2019/08/13/tech/hexo/Hexo%20Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%93%88%E6%9E%97%E6%91%87%E7%89%B9%E6%95%88/" target="_blank" rel="noopener">http://localhost:4000/2019/08/13/tech/hexo/Hexo%20Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%93%88%E6%9E%97%E6%91%87%E7%89%B9%E6%95%88/</a></p><p>在这里说一个生成不变的URL链接呢?这就是我们要说的hexo-addrlink插件，简单易用</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-addrlink --save</span><br></pre></td></tr></table></figure><p>执行此命令可能会不成功，提示你缺少相应的依赖，比如babel-eslint、mini-css-extract-plugin、webpack-cli…<br>使用npm命令安装即可，比如npm install <a href="mailto:eslint@4.x" target="_blank" rel="noopener">eslint@4.x</a> babel-eslint@8 –save-dev</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改根目录站点配置文件件config.yml，改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: :/addrlink.html   <span class="comment">#此处可以自己设置，也可以之间使用  :/addrlink</span></span><br><span class="line">addrlink:</span><br><span class="line">   alg: crc16   <span class="comment">#算法   crc16(default) and crc32</span></span><br><span class="line">   rep: hex     <span class="comment">#进制   dec(default)  and hex</span></span><br></pre></td></tr></table></figure><p>生成的链接将会是这样的(官方样例):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/<span class="number">66</span>c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/<span class="number">65535.</span>html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/<span class="number">8</span>ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/<span class="number">1690090958.</span>html</span><br></pre></td></tr></table></figure><p>这样每篇文章就为改变链接地址。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是docker</title>
      <link href="/14464.html"/>
      <url>/14464.html</url>
      
        <content type="html"><![CDATA[<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。docker就是类似的理念。现在都流行云计算了，云计算就好比大货轮。docker就是集装箱。</p><p>1.不同的应用程序可能会有不同的应用环境，比如.net开发的网站和php开发的网站依赖的软件就不一样，如果把他们依赖的软件都安装在一个服务器上就要调试很久，而且很麻烦，还会造成一些冲突。比如IIS和Apache访问端口冲突。这个时候你就要隔离.net开发的网站和php开发的网站。常规来讲，我们可以在服务器上创建不同的虚拟机在不同的虚拟机上放置不同的应用，但是虚拟机开销比较高。docker可以实现虚拟机隔离应用环境的功能，并且开销比虚拟机小，小就意味着省钱了。</p><p>2.你开发软件的时候用的是Ubuntu，但是运维管理的都是centos，运维在把你的软件从开发环境转移到生产环境的时候就会遇到一些Ubuntu转centos的问题，比如：有个特殊版本的数据库，只有Ubuntu支持，centos不支持，在转移的过程当中运维就得想办法解决这样的问题。这时候要是有docker你就可以把开发环境直接封装转移给运维，运维直接部署你给他的docker就可以了。而且部署速度快。3.在服务器负载方面，如果你单独开一个虚拟机，那么虚拟机会占用空闲内存的，docker部署的话，这些内存就会利用起来。</p><h3 id="docker-核心的三大组件"><a href="#docker-核心的三大组件" class="headerlink" title="docker 核心的三大组件"></a>docker 核心的三大组件</h3><p>images(镜像) storage(仓库) container(容器) 是docker核心的三大组件，但是images和storage都不具备运行服务的能力，而真正具备运行服务能力的是container,你可以理解为images和container就像python中类和实例的关系</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来</p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p><p>（1）资源占用多</p><p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p><p>（2）冗余步骤多</p><p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p><p>（3）启动慢</p><p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p><h3 id="linux-容器"><a href="#linux-容器" class="headerlink" title="linux 容器"></a>linux 容器</h3><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><p>（1）启动快</p><p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p><p>（2）资源占用少</p><p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p><p>（3）体积小</p><p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p><p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><h3 id="docker就是linux容器的封装"><a href="#docker就是linux容器的封装" class="headerlink" title="docker就是linux容器的封装"></a>docker就是linux容器的封装</h3><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><h3 id="Docker-的主要用途，目前有三大类。"><a href="#Docker-的主要用途，目前有三大类。" class="headerlink" title="Docker 的主要用途，目前有三大类。"></a>Docker 的主要用途，目前有三大类。</h3><p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">显示版本号</span><br><span class="line">docker --versions</span><br><span class="line"></span><br><span class="line">显示镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">保存镜像 </span><br><span class="line">docker save -o /home/dyufei/tensorflow.tar tensorflow/tensorflow</span><br><span class="line"></span><br><span class="line">或者 docker save tensorflow/tensorflow &gt; /home/dyufei/tensorflow.tar</span><br><span class="line"></span><br><span class="line">加载镜像</span><br><span class="line">docker load -i tensorflow.tar</span><br><span class="line"></span><br><span class="line">登录系统 镜像编号</span><br><span class="line">docker run -ti <span class="number">6866</span></span><br><span class="line">docker run -it centos /bin/bash</span><br><span class="line"></span><br><span class="line">登录系统 容器编号</span><br><span class="line">docker run -d --privileged=true mycentos /usr/sbin/init</span><br><span class="line">docker <span class="keyword">exec</span> –it 容器编号 /bin/bash</span><br><span class="line"></span><br><span class="line">进入虚拟机</span><br><span class="line">docker-machine ssh</span><br><span class="line"></span><br><span class="line">挂载共享文件夹</span><br><span class="line">docker run -v /www:/mnt/www</span><br><span class="line"></span><br><span class="line">查看所有容器</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker rm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台启动服务和端口映射</span><br><span class="line"></span><br><span class="line">docker run -it -d -p <span class="number">8000</span>:<span class="number">8000</span> mycentos cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看宿主ip</span><br><span class="line"></span><br><span class="line">docker-machine ip default</span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看容器编号</span><br><span class="line"></span><br><span class="line">cat /proc/self/cgroup | head <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">提交更改</span><br><span class="line">docker commit 容器id 镜像名称</span><br><span class="line"></span><br><span class="line">删除镜像</span><br><span class="line"></span><br><span class="line">docker rmi -f 镜像id</span><br><span class="line"></span><br><span class="line">检查系统</span><br><span class="line">cat /etc/redhat-release</span><br><span class="line"></span><br><span class="line">退出镜像</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">docker run -it ubuntu:rename /bin/echo <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">删除镜像缓存</span><br><span class="line"></span><br><span class="line">docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker stop</span><br><span class="line"></span><br><span class="line">docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker rm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中vim操作</title>
      <link href="/63005.html"/>
      <url>/63005.html</url>
      
        <content type="html"><![CDATA[<p>基本上vi/vim可以分为三种状态，分别是普通模式、插入模式和命令模式，各模式的功能区分如下：</p><p>1、普通模式</p><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段。</p><p>2、插入模式</p><p>只有在插入下，才可以做文字输入、删除，按「ESC」键可回到普通模式。</p><p>可以按i、I、a、A、o、O、r、R即可。其中i和I表示插入（Insert），r和R表示替换（replace）。</p><p>3、命令模式</p><p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号等……</p><p>可以按“:”、“/”、“?”。其中“:”表示输入vim命令，“/”表示后面输入要向下搜索的字符串，“?”表示后面输入要向上搜索字符串。   其实，可以把普通模式理解为常态，进入其它任何一种模式，需要某种特殊方式，而从其它特殊模式回到普通模式，就按「ESC」键即可。</p><h2 id="1、普通模式–-gt-插入模式"><a href="#1、普通模式–-gt-插入模式" class="headerlink" title="1、普通模式–&gt;插入模式"></a>1、普通模式–&gt;插入模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i   小写字母i，   在光标位置插入</span><br><span class="line">a  小写字母a，  在光标的下一个位置插入</span><br><span class="line">I   大写字母I，   在光标所在行的第一个非空格处插入</span><br><span class="line">A  大写字母A， 在光标所在行的最后一个字符处插入</span><br><span class="line">o  小写字母o，  在光标所在行的下一行处插入新行</span><br><span class="line">O  大写字母O， 在光标所在行的上一行处插入新航</span><br><span class="line">r   小写字母r，   替换光标所在处的字符一次</span><br><span class="line">R  大写字母R， 持续替换光标所在处的字符，直到按下「ESC」键</span><br></pre></td></tr></table></figure><h2 id="2、普通模式–-gt-命令模式"><a href="#2、普通模式–-gt-命令模式" class="headerlink" title="2、普通模式–&gt;命令模式"></a>2、普通模式–&gt;命令模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:q   退出</span><br><span class="line">:q!  强制退出</span><br><span class="line">:wq  保存后退出</span><br><span class="line">:wq! 强制保存后退出</span><br></pre></td></tr></table></figure><h2 id="3、光标行操作"><a href="#3、光标行操作" class="headerlink" title="3、光标行操作"></a>3、光标行操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G     光标移动到文件的最后一行的第一个非空白字符</span><br><span class="line">nG/ngg 光标移动到文件的第n行，相当于”:n”</span><br><span class="line">gg    光标移动到文件的第<span class="number">1</span>行的第一个非空白字符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>修改mysql密码错误</title>
      <link href="/53318.html"/>
      <url>/53318.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1820</span> (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>; </span><br><span class="line">set <span class="keyword">global</span> validate_password_length=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>再次修改密码即可!!!</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo deploy推送至github</title>
      <link href="/29770.html"/>
      <url>/29770.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="找至config-yml文件中的deploy"><a href="#找至config-yml文件中的deploy" class="headerlink" title="找至config.yml文件中的deploy"></a>找至config.yml文件中的deploy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/S1283034852/S1283034852.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="安装hexo-deploy插件"><a href="#安装hexo-deploy插件" class="headerlink" title="安装hexo deploy插件"></a>安装hexo deploy插件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">或</span><br><span class="line">npm install hexo-deployer-git --s</span><br></pre></td></tr></table></figure><h4 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h4><p>无需原始打包命令,项目根目录执行如下命令即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">或</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>下次推送记得删除.deploy_git文件夹后再次hexo deploy<br>否则会被.gitignore过滤</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo图片不显示</title>
      <link href="/1458.html"/>
      <url>/1458.html</url>
      
        <content type="html"><![CDATA[<p>hexo图片统一放在source–&gt;images中</p><p>如果没有images文件夹，手动创建即可！！！</p><p><img src="/images/1567497600053.png" alt="1567497600053"></p><p>然后修改文章的图片的路径:路径支持markdown语法和html语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![<span class="number">1</span>](/images/<span class="number">1.j</span>pg)</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">"/images/1.jpg"</span>&gt;</span><br><span class="line"></span><br><span class="line">二选一即可!!!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo正确姿势打开标签页与分类页</title>
      <link href="/5998.html"/>
      <url>/5998.html</url>
      
        <content type="html"><![CDATA[<p>使用新的主题，发现只有home单页面，有些功能无法进行点击跳转，在此拿我的博客举例</p><p><img src="/images/1567478933360.png" alt="1567478933360"></p><p>​    发现我只有一个home，却没有标签页与分类页的显示</p><p>​    找到主题下config.yml      blog–&gt;themes–&gt;next–&gt;config.yml</p><p><img src="/images/1567478961930.png" alt="1567478961930"></p><p>​    将前方引号去除，保存即可！！！</p><h4 id="显示后却无法点击或报错"><a href="#显示后却无法点击或报错" class="headerlink" title="显示后却无法点击或报错"></a>显示后却无法点击或报错</h4><p>​    这是因为虽然显示成功，但是主题下没有存放的文件夹</p><h4 id="创建标签存放文件夹-页面"><a href="#创建标签存放文件夹-页面" class="headerlink" title="创建标签存放文件夹(页面)"></a>创建标签存放文件夹(页面)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">或</span><br><span class="line">hexo n page tags</span><br></pre></td></tr></table></figure><p>​    这个时候会发现blog–&gt;source–&gt;tags出现tags文件夹</p><p>​    用于标签</p><p><img src="/images/1567479367433.png" alt="1567479367433"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_posts 用于存放的是主页也就home页展示的东西</span><br><span class="line">tags   用于存放标签页展示的</span><br></pre></td></tr></table></figure><p>​    打开标签页文件下会自动生成index.md文件</p><p><img src="/images/1567492164597.png" alt="1567492164597"></p><p>​    文章使用：(下图就是这篇文章属于mysql标签)</p><p>​                              <img src="/images/1567492256604.png" alt="1567492256604"></p><h4 id="清除缓存文件-网站显示异常时可以执行命令试试"><a href="#清除缓存文件-网站显示异常时可以执行命令试试" class="headerlink" title="清除缓存文件   网站显示异常时可以执行命令试试"></a>清除缓存文件   网站显示异常时可以执行命令试试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h4 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">或</span><br><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure><p>​    基本设置:</p><p>​        <img src="/images/1567492497245.png" alt="1567492497245"></p><p>​    使用同上标签！！！注：key值不在是tags而是categories</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建立博客</title>
      <link href="/707.html"/>
      <url>/707.html</url>
      
        <content type="html"><![CDATA[<h4 id="首先安装Hexo-在此之前，请确保已经安装好新版的node-js"><a href="#首先安装Hexo-在此之前，请确保已经安装好新版的node-js" class="headerlink" title="首先安装Hexo 在此之前，请确保已经安装好新版的node.js"></a>首先安装Hexo 在此之前，请确保已经安装好新版的node.js</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​    如果感觉安装速度慢，可以为npm指定国内源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>​    此处如果指定源，请使用cnpm，而不是npm</p><p>​    </p><h4 id="安装完成后，创建博客项目"><a href="#安装完成后，创建博客项目" class="headerlink" title="安装完成后，创建博客项目"></a>安装完成后，创建博客项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>​    blog 为项目名，语义化</p><h4 id="建立第一篇文章"><a href="#建立第一篇文章" class="headerlink" title="建立第一篇文章"></a>建立第一篇文章</h4><p>​    进入到blog目录下 cd blog</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new myfirst</span><br><span class="line">或</span><br><span class="line">hexo n myfirst</span><br></pre></td></tr></table></figure><h4 id="然后运行hexo服务"><a href="#然后运行hexo服务" class="headerlink" title="然后运行hexo服务"></a>然后运行hexo服务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>​    这样就可以在本地访问你的博客了，默认端口号是4000</p><h4 id="下面我们可以配置一下hexo主题，Hexo-提供了默认主题-landscape，主题的位置在-blog-gt-themes-文件夹下。主题根据自己喜好可以在网上找到-https-hexo-io-themes"><a href="#下面我们可以配置一下hexo主题，Hexo-提供了默认主题-landscape，主题的位置在-blog-gt-themes-文件夹下。主题根据自己喜好可以在网上找到-https-hexo-io-themes" class="headerlink" title="下面我们可以配置一下hexo主题，Hexo 提供了默认主题 landscape，主题的位置在 blog -&gt;themes 文件夹下。主题根据自己喜好可以在网上找到:https://hexo.io/themes/"></a>下面我们可以配置一下hexo主题，Hexo 提供了默认主题 landscape，主题的位置在 blog -&gt;themes 文件夹下。主题根据自己喜好可以在网上找到:<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></h4><p>​    点击链接选择一个喜欢的主题！！！</p><p>​    <img src="/images/1567477517561.png" alt="1567477517561"></p><p>​    点击主题名字会跳转到github地址，复制github地址</p><p><img src="/images/1567477595809.png" alt="1567477595809"></p><p>​    </p><p>​    主题都放在blog/themes文件下下面，这我们下载一个新的主题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir themes/next</span><br><span class="line">下载到自己next文件夹下</span><br><span class="line">git clone https://github.com/yelog/hexo-theme<span class="number">-3</span>-hexo.git themes/next</span><br></pre></td></tr></table></figure><p>​    然后修改/blog /config.yml文件，将其中theme改成next(因为初始化主题在theme中，此刻将主题指定自己下载的文件夹)</p><p>运行服务，测试一下吧！！！</p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">或</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于node.js的npm命令无反应解决方法</title>
      <link href="/54450.html"/>
      <url>/54450.html</url>
      
        <content type="html"><![CDATA[<p>npm完全无反应，不管是热启动(npm run dev)还是安装(npm install)</p><p>下标不停在哪里闪，但是没有反应……</p><p>解决方案: 删除.npmrc文件</p><p>​    强调：不是安装node.js目录npm模块下的那个npmrc文件</p><p>​    而是在c;\users\账户\下的.npmrc文件</p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 同步服务器代码</title>
      <link href="/63824.html"/>
      <url>/63824.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先下载sftp插件"><a href="#首先下载sftp插件" class="headerlink" title="首先下载sftp插件"></a>首先下载sftp插件</h2><p>​    ctrl + shift + X 打开应用商店搜索sftp进行下载</p><h2 id="配置sftp"><a href="#配置sftp" class="headerlink" title="配置sftp"></a>配置sftp</h2><p>​    ctrl + shift + P  打开命令搜索sftp.json进行配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"My Server"</span>,              </span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"106.13.121.86"</span>,          </span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>,               </span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,                       </span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"root"</span>,               </span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"sh@1283034852"</span>,      </span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"/usr/local/www"</span>,   </span><br><span class="line">    <span class="string">"uploadOnSave"</span>: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次保存文件服务器代码实时更新。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django uwsgi和nginx部署</title>
      <link href="/59230.html"/>
      <url>/59230.html</url>
      
        <content type="html"><![CDATA[<p>整个部署链路：Nginx –&gt; uWSGI –&gt; python web </p><p>uWSGI是一个软件，部署服务的工具</p><p>WSGI规范，WSGI规定了python web应用和python web服务器之间的通讯方式</p><p>目前主流的python web框架，都是基于这个规范实现的</p><p>uwsgi协议：是uWSGI工具独有的协议，简介高效的uwsgi协议是选择uWSGI作为部署工具的重要理由之一，uWSGI是实现了uwsgi协议，WSGI规范和http协议的一个c语言实现的软件</p><p><strong>Nginx</strong>是一个Web服务器，是一个反向代理工具，我们通常用它来部署静态文件。主流的Python Web开发框架都遵循WSGI规范。</p><p>uWSGI通过WSGI规范和我们编写的服务进程通讯，然后通过自带的高效的 uwsgi 协议和 Nginx进行通讯，最终Nginx通过HTTP协议将服务对外透出。</p><p>当一个访问进来的时候，首先到 Nginx，Nginx会把请求（HTTP协议）转换uwsgi协议传递给uWSGI，uWSGI通过WSGI和web server进行通讯取到响应结果，再通过uwsgi协议发给Nginx，最终Nginx以HTTP协议发现响应给用户。</p><p>有些同学可能会说，uWSGI不是支持HTTP协议么，也支持静态文件部署，我不用Nginx行不行？</p><p>当然可以，这么做没问题，但目前主流的做法是用Nginx，毕竟它久经考验，更稳定，当然也更值得我们信赖</p><p><strong>supervisor</strong> 是一个进程管理工具。任何人都不能保证程序不异常退出，不别被人误杀，所以一个典型的工程做法就是使用supervisor看守着你的进程，一旦异常退出它会立马进程重新启动起来</p><h2 id="进程分析："><a href="#进程分析：" class="headerlink" title="进程分析："></a>进程分析：</h2><p>进程是计算机分配资源的最小单位，我们的程序至少是运行在一个进程中</p><p>1.查看进程信息</p><p>Ps aux | grep python 查看系统中运行的python进程</p><p>Ps -ef | grep xxxx</p><p>输出结果中user后面的PID代表进程编号</p><p>2.向进程发送信号：</p><p>我们可以使用 kill PID 杀死一个进程，或者使用 kill -9 PID 强制杀死一个进程</p><p>根据进程名杀死</p><p> pkill -9 nginx</p><h2 id="端口分析："><a href="#端口分析：" class="headerlink" title="端口分析："></a>端口分析：</h2><p>比如我们在服务器上运行 Nginx，访问的时候就是连接不上，我们可以使用 ps aux | grep nginx看下nginx进程是不是启动了，也可以看下 80端口有没有被占用。换句话说，如果没有任何程序跑在这个端口上（或者说没有任何程序使用这个端口），证明忘了启动相关程序或者没能启动成功，或者说程序使用的端口被修改了，不是80了，那又怎么可能能访问到呢？</p><p>1.<strong>查看全部端口占用情况</strong></p><p>Linux中我们可以使用 netstat 工具来进程网络分析，netstat 命令有非常多选项，这里只列出了常用的一部分</p><p>-a或–all 显示所有连接中的Socket，默认不显示 LISTEN 相关的。</p><p>-c或–continuous 持续列出网络状态，不断自动刷新输出。</p><p>-l或–listening 显示监听中的服务器的Socket。</p><p>-n或–numeric 直接使用IP地址，而不是展示域名。</p><p>-p或–programs 显示正在使用Socket的程序进程PID和名称。</p><p>-t或–tcp 显示TCP传输协议的连接。</p><p>-u或–udp 显示UDP传输协议的连接。</p><p>查看服务器监控了那些端口：netstat -nltp</p><p>注意：如果PID和Program Name显示不出来，证明是权限不够，可以使用sudo运行</p><p>2.查看具体端口占用情况：</p><p>sudo lsof -i :80 (注意端口80前面有个英文的冒号</p><p>我们可以通过这个方法查询出占用端口的程序，如果遇到端口已经被占用，原来的进程没有正确地终止，可以使用kill命令停掉原来的进程，这样我们就又可以使用这个端口了</p><h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h2><p>Pip install uwsgi</p><p>如果出现gcc错误，安装yum  install  gcc</p><p>查看uwsgi动态链接是否有问题</p><p>Which uwsgi</p><p>配置环境变量：</p><p>Vim ~/.bash_profile</p><p>生效环境变量：source ~/.bash_profile</p><p>启动uwsgi服务：</p><p>uwsgi –http :9090 –wsgi-file index.py</p><p>添加并发：</p><p>processes为进程</p><p>threads为线程</p><p>uwsgi –http :9090 –wsgi-file index.py –processes 4 –threads 2</p><h2 id="uwsgi部署django项目："><a href="#uwsgi部署django项目：" class="headerlink" title="uwsgi部署django项目："></a>uwsgi部署django项目：</h2><p>项目下创建uwsgi.ini文件</p><p>[uwsgi]</p><p># 通过哪个端口访问</p><p>http = 0.0.0.0:8001</p><p># 项目的路径</p><p>chdir = /usr/www/DjangoSpider/</p><p># 指向项目wsgi.py文件</p><p>wsgi-file = DjangoSpider/wsgi.py</p><p># 进程</p><p>processes = 4</p><p>#线程</p><p>threads = 2</p><p>#不使用 nginx的情况下，载入静态资源</p><p>$static-map=/static=static</p><p>执行uwsgi -I  uwsgi.ini  &amp;  &amp;指后台运行，所有东西会写入日志里</p><p>日志：</p><p>Logto = /tmp/mylog.log</p><p>然后启动uwsgi uwsgi.ini即可</p><p>也可以使用命令:uwsgi –http :8000 –module magazine.wsgi</p><p>–module  指向wsgi.py文件 和自定义ini文件一样</p><p>发现不会出现静态文件</p><p>Nginx</p><p>轻量级、抗高并发、速度快</p><p>安装：yum install  nginx</p><p>测试nginx：输入服务器ip会报出欢迎界面</p><p>启动nginx服务</p><p>systemctl start/restart nginx</p><p>验证：直接请求IP，可见nginx</p><p>配置</p><p>默认的配置文件在 /etc/nginx 路径下，使用该配置已经可以正确地运行nginx；如需要自定义，修改其下的 nginx.conf 等文件即可。</p><p>查看是否启动：（如果有master和worker两个进程证明启动成功）</p><p>ps -ef | grep nginx</p><p>停止(建议用quit，不建议用stop)</p><p>nginx -s quit</p><p>重新加载配置文件</p><p>nginx -s reload</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx:"></a>配置nginx:</h2><p>在项目的根目录下创建一个config文件夹，用来存放nginx和uwsgi的配置信息</p><p>Mkdir  config</p><p>在文件夹下创建文件进行nginx配置：</p><p>Vi  名字.conf</p><p># 负载均衡</p><p>upstream upstream1 {</p><p>​    server 127.0.0.1:8000;  # 处理相同业务的多个服务器 (负载均衡)</p><p>}</p><p>server {</p><p>​    listen       80;           监听的http端口</p><p>​    server_name  192.168.206.132;   # 对外部用户提供的统一域名或者ip地址</p><p>​    # 将动态请求转发给uwsgi服务器</p><p>​    location / {</p><p>​        # 包含uwsgi请求的参数</p><p>​        include uwsgi_params;</p><p>​        # 转交请求给uwsgi服务器 (uwsgi服务器的ip和端口号)</p><p>​        #uwsgi_pass 127.0.0.1:8000;  # 单个uwsgi服务器(不需要负载均衡)</p><p>​        uwsgi_pass upstream1;</p><p>​    }</p><p>​    # 如果是静态资源请求就直接响应资源。</p><p>​    location /static {</p><p>​        # 指定静态文件存放的目录 (需要修改/usr/…目录的操作权限。 $ chmod 777 /usr)</p><p>​        alias /usr/www/D_text04/static/;</p><p>​    }</p><p>#指向django的media目录</p><p>​    location /media {</p><p>​        alias /usr/www/D_text04/static/;</p><p>​    }</p><p>}</p><p>将该配置文件加入到nginx启动配置文件中</p><p>Nginx配置文件在:/etc/nginx/      回去conf.d中找启动文件</p><p>Cp  名字.conf   /etc/nginx/conf.d</p><p>拉去所有static文件到同一个目录</p><p>在django中sett.py文件中，注释STATICFILES_DIRS,再生产环境中，这个配置失效</p><p>然后执行python manage.py collectstatic</p><p>运行nginx：service  nginx  restart</p><p>nginx错误日志：/var/log/nginx</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django中的cookie与session</title>
      <link href="/34867.html"/>
      <url>/34867.html</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="redsa" size="5">cookie</font></p><ol><li><p><font color="reds" size="4">cookie的使用方法</font></p><ol><li><p><font color="Fuchsia" size="3">设置cookie</font></p><ul><li><p>from django.shortcuts import render,HttpResponse</p><p>​    def set_cookie(request):</p><p><font size="3">        在HTTPResponse部分设置COOKIE值</font></p><p>​        cookie_reponse = HttpResponse(‘这是一个关于cookie的测试’)<br>​        cookie_reponse.set_cookie(‘test’,’hello cookie’)<br>​        return cookie_reponse</p></li></ul></li><li><p><font color="Fuchsia" size="3">获取cookie</font></p><ul><li><p>def get_cookie(request):</p><p><font size="3">    获取cookie值，从request属性中的COOKIE属性中</font></p><p>​    cookie_data = request.COOKIES.get(‘test’)<br>​    return HttpResponse(‘Cookie值为:%s’ % cookie_data)</p></li></ul></li><li><p><font color="Fuchsia" size="3">删除cookie</font></p><ul><li>def delete_cookie(request):<pre><code>response = HttpResponseRedirect(&apos;/check_cookie/&apos;)  response.delete_cookie(&apos;test&apos;)  return response</code></pre></li></ul></li><li><p><font color="Fuchsia" size="3">怎么防止修改cookie</font></p><ul><li><p>使用set_signed_cookie这个函数进行防止用户在客户端进行修改(并不是直接给cookie加密)</p></li><li><p><font color="LightSalmon" size="3">代码：</font></p><ul><li><p>def check_salt_cookie(request):</p><pre><code>try:      salt_cookie = request.get_signed_cookie(key=&apos;salt_cookie&apos;,salt=&apos;nice&apos;)  except KeyError: #获取不到该key值的Cookie      response = HttpResponse(&apos;正在设置一个salt Cookie值&apos;)      response.set_signed_cookie(key=&apos;salt_cookie&apos;,salt=&apos;nice&apos;,value=&apos;salt_cookie&apos;)</code></pre><p>​        return response<br>​    else: #获取到了对应key值，展示到新的HttpResonse中<br>​        return HttpResponse(‘获取到的salt Cookie值:%s’ % salt_cookie)</p></li><li><p><font color="lightred" size="3">注意：</font></p><ul><li>因为第一次访问时没有添加cookie值所以就会有keyerror的错误</li><li>当有了这个错误你就设置cookie就可以了</li><li>当你刷新页面的时候已经有了cookie值所以直接获取加盐的cookie</li></ul></li></ul></li></ul></li></ol></li></ol></li><li><p><font color="redsa" size="5">session</font></p><ol><li><p><font color="reds" size="4">session的使用方法</font></p><ol><li><p><font color="Fuchsia" size="3">使用流程</font></p><ul><li>客户端访问服务端，服务端为每一个客户端返回一个唯一的 sessionid ，比如 xxx 。</li><li>客户端需要保持某些状态，比如维持登陆。那么服务端会构造一个 {sessionid: xxx } 类似这样的字典数据加到 Cookie 中发送给用户。注意此时，只是一个随机字符串，返回给客户端的内容并不会像之前一样包含实际数据。</li><li>服务端在后台把返回给客户端的 xxx 字符串作为 key 值，对应需要保存的服务端数据为一个新的字典，存储在<br>服务器上，例如： {xxx : {id:1}}</li><li><font color="lightred" size="3">注意：</font><ol><li>默认存储在数据库的 Session 数据，是通过 base64 编码的，我们可以通过 Python 的<br> base64 模块下的 b64decode() 解码得到原始数据</li></ol></li></ul></li><li><p><font color="Fuchsia" size="3">获取需要的session</font></p><ul><li>session_data = request.session.get(Key)</li><li>session_data = request.session[Key]</li><li><font color="lightred" size="3">注意：</font><ol><li>在 Session 中获取对应值， get 方法获取时，如不存在该 Key 值，不会引发异常，返回 None<br>而第二种直接通过字典获取，如 Key 值不存在，引发 KeyErro</li></ol></li></ul></li><li><p><font color="Fuchsia" size="3">删除session</font></p><ul><li>del request.seesion[Key]<ol><li>删除对应session， Key 值不存在时，引发 KeyError</li></ol></li><li>request.session.clear()<ol><li>清空 Session 中的所有数据。这里客户端还会保留 sessionid<br>只不过在服务端 sessionid 对应的数据没有了。</li></ol></li><li>request.session.flush()<ol><li>直接删除当前客户端的的Seesion数据。这里不光服务端sessionid对应的数据没有了，客户端的<br>sessionid也会被删除</li></ol></li></ul><ol><li><p><font color="LightCoral" size="3">代码：</font></p><ul><li><p>def delete_session(request):</p><pre><code>if request.session.get(&apos;test_id&apos;):      del request.session[&apos;test_id&apos;]      return HttpResponse(&apos;Session被删了&apos;)  else:      return HttpResponse(&apos;目前没有任何需要删除的session&apos;)</code></pre></li><li><p><font color="lightred" size="3">注意：</font></p><ul><li>这里使用 del request.session[Key] 的方式来进行 Session 的删除</li><li>如果存在对应 test_id 的 Session 值则删除，反之返回一个字符串</li></ul></li><li><p><font color="lightred" size="3">总结：</font></p><ol><li>使用的是 del 的针对性删除方式，这样不会将整个客户端的 session 删除掉</li><li>使用 request.session.clear() ，只是清空了服务端 Session 中的数据，但是客户端的 Cookie 中还会保存sessionid ，只不过这个值对应的字符串所对应的用户数据是一个空</li><li>使用 request.session.flush() ，那么客户端 Cookie 中保存的 sessionid 首先会被删除，其次通过<br>sessionid 值保存的用户数据也会被全部删除。</li></ol></li></ul></li></ol></li><li><p><font color="Fuchsia" size="3">如何设置有效期设置cookie</font></p><ol><li><font color="LightCoral" size="4">设置Session的有效时间</font><ul><li>value ：有效时间</li><li>为整数时：将在value为秒单位之后过期</li><li>为0时：将在用户关闭浏览器之后过期。</li><li>为None时：使用全局过期的设置，默认为两个星期，14天。</li><li>为datetime时：在这个指定时间后过期。</li></ul></li><li><font color="LightCoral" size="4">返回距离过期还剩下的秒数</font><ul><li><font color="LightCoral" size="3">代码：</font><ol><li>request.session.get_expiry_age()</li></ol></li></ul></li><li><font color="LightCoral" size="4">清除过期的 Session 会话</font><ul><li><font color="LightCoral" size="3">代码：</font><ol><li>request.session.clear_expired()</li></ol></li></ul></li><li><font color="LightCoral" size="4">代码展示：</font><ul><li>from django.shortcuts import render,HttpResponse<br>import datetime<br>def set_session(request):<pre><code>if request.session.get(&apos;test_id&apos;):    session_data = request.session.get(&apos;test_id&apos;)# 用户拿到的的session随机字符串    session_key = request.session.session_key # 获取客户端浏览器中的SessionID值    session_expire = request.session.get_expiry_age()    now = datetime.datetime.now()    expire_time = now + datetime.timedelta(seconds=session_expire)    response = &apos;&lt;div&gt;SessionID : %s&lt;/div&gt;&apos; % session_key + \               &apos;&lt;div&gt;Session : %s&lt;/div&gt;&apos; % session_data + \               &apos;&lt;div&gt;ExpireTime : %s&lt;/div&gt;&apos; % expire_time    return HttpResponse(response)else:    request.session[&apos;test_id&apos;] = &apos;TEST&apos;    request.session.set_expiry(None)    return HttpResponse(&apos;已设置好Session&apos;)</code></pre></li><li><font color="lightred" size="3">注意：</font><ol><li>用户在第一次访问时，会走 else 分支</li><li>因为此时还没有任何服务端的 Session 及客户端的 Cookie 值设定</li><li>所以我们通过 request.session[Key] 的方式来设置一个 Session 值，值为 TEST</li><li>当用户第二次访问时将展示出所设置好的Session值及在客户端浏览器中存储的sessionid</li></ol></li></ul></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django中的数据库</title>
      <link href="/59797.html"/>
      <url>/59797.html</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="BlanchedAlmond" size="4">首先在数据库中创建<font color="green" size="3">django</font>使用的库</font></p><ul><li>代码:<ol><li><font color="DarkOrchid" size="3">create database django_ku</font></li></ol></li></ul></li><li><p><font color="BlanchedAlmond" size="4">配置属性</font></p><ul><li><p>代码：</p><ul><li><font color="DarkOrchid" size="3">DATABASES = {</font><ul><li><font color="DarkOrchid" size="3">default{</font><ul><li><font color="DarkOrchid" size="3">‘ENGINE’: ‘django.db.backends.mysql’, # 数据库引擎</font></li><li><font color="DarkOrchid" size="3">“USER”: “root”, # 用户名 </font>        </li><li><font color="DarkOrchid" size="3">‘NAME’: “django_ku”, # 使用的库名</font></li><li><font color="DarkOrchid" size="3">“PASSWORD”: “sun123..”, # 数据库密码</font></li><li><font color="DarkOrchid" size="3">“HOST”: “localhsot”, # 数据库主机地址</font>    </li><li><font color="DarkOrchid" size="3">“PORT”: “3306”</font>    </li></ul></li><li><font color="DarkOrchid" size="3">}</font></li></ul></li><li><font color="DarkOrchid" size="3">}</font></li></ul></li></ul></li></ol><p><font color="red" size="5">安装pymysql命令：</font></p><ul><li><font color="CadetBlue" size="3">pip install pymysql -i <a href="https://pypi.tuna.tsinghua.edu.cn/simp" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simp</a></font></li></ul><p><font color="red" size="5">字段：</font></p><ol><li><font color="DarkGoldenRod" size="3">BooleabField</font><ul><li>True/False字段，默认值为none</li></ul></li><li><font color="DarkGoldenRod" size="3">CharField</font><ul><li>字符串字段，必须含有max_length(用来设置字符串的长度)</li></ul></li><li><font color="DarkGoldenRod" size="3">DateField</font><ul><li>有两个参数<ol><li>auto_now(当为True时保存数据使用当前时间)</li><li>auto_now_add(当为True时显示第一次创建时)</li></ol></li></ul></li><li><font color="DarkGoldenRod" size="3">DatetimeField</font><ul><li>使用datetime.datetime实例来表示日期和时间</li></ul></li><li><font color="DarkGoldenRod" size="3">DecimalField</font><ul><li>有两个参数<ol><li>max_digits(显示位数总数)</li><li>decimal_places(显示数量和精度)</li></ol></li></ul></li><li><font color="DarkGoldenRod" size="3">RmailField</font><ul><li>邮件地址<ol><li>max_length(用来表示邮箱地址的长度，一般都是254)</li></ol></li></ul></li><li><font color="DarkGoldenRod" size="3">FloatField</font><ul><li>表示浮点数</li></ul></li><li><font color="DarkGoldenRod" size="3">integerField</font><ul><li>表示一个整数，范围是 -2147483648到2147483647</li></ul></li><li><font color="DarkGoldenRod" size="3">GenericlPAddressField</font><ul><li>IPV4或者IPV6的字符串<ol><li>protoco1     IP协议默认both为全选</li><li>unpack_ipv4     解析IP地址只有当协议为both才可以用</li></ol></li></ul></li><li><font color="DarkGoldenRod" size="3">SlugField</font><ul><li>只包含字母、数字、下划线的字符串</li></ul></li><li><font color="DarkGoldenRod" size="3">TextField</font><ul><li>大文本字段</li></ul></li><li><font color="DarkGoldenRod" size="3">URLField</font><ul><li>存储URL字段</li></ul></li></ol><p><font color="red" size="5">字段属性：</font></p><ul><li>​    上面的字段都支持下面的属性</li></ul><ol><li><font color="DarkViolet" size="3">null</font><ul><li>使用空字符代表空值</li></ul></li><li><font color="DarkViolet" size="3">blank</font><ul><li>为True代表可以字段值为空</li></ul></li><li><font color="DarkViolet" size="3">choices</font><ul><li>二元组的列表或者元组</li></ul></li><li><font color="DarkViolet" size="3">db_column</font><ul><li>表示该字段的名称</li></ul></li><li><font color="DarkViolet" size="3">db_index</font><ul><li>为True时创建索引</li></ul></li><li><font color="DarkViolet" size="3">default</font><ul><li>默认时可以是回调函数</li></ul></li><li><font color="DarkViolet" size="3">editable</font><ul><li>如果为False是不允许被修改</li></ul></li><li><font color="DarkViolet" size="3">primary_key</font><ul><li>一个模型类同时只能有一个主键</li></ul></li><li><font color="DarkViolet" size="3">unique</font><ul><li>为True代表这个数据是唯一的</li></ul></li><li><font color="DarkViolet" size="3">verbose_name</font><ul><li>对于字段的一个可读性更高的名称</li></ul></li><li><font color="DarkViolet" size="3">app_label</font><ul><li>描述属于哪个app下面</li></ul></li><li><font color="DarkViolet" size="3">db_table</font><ul><li>显示当前模型所对应的表名</li></ul></li><li><font color="DarkViolet" size="3">ordering</font><ul><li>显示数据存储是的排序规则</li></ul></li><li><font color="DarkViolet" size="3">unique_together</font><ul><li>设置表中的不重复字段组合</li></ul></li><li><font color="DarkViolet" size="3">verbose_name</font><ul><li>显示这个表的使用名称    </li></ul></li><li><font color="DarkViolet" size="3">verbose_name_plural</font><ul><li>设置表的复数名称</li></ul></li></ol><p><font color="red" size="4">查找对象：</font></p><ol><li><font color="DarkViolet" size="3">all()</font><ul><li>获取表中所有数据，返回的是queryset的数据对象<ol><li>代码：<ul><li>all_person = Person.objects.all()</li></ul></li></ol></li></ul></li><li><font color="DarkViolet" size="3">filter(**kwargs)</font><ul><li>返回一个包含数据对象的集合<ol><li>代码：<ul><li>res = Person.objects.all().filter(age__lt=16)</li></ul></li></ol></li></ul></li><li><font color="DarkViolet" size="3">exclude(**kwargs)</font><ul><li>返回一个包含数据对象的集合，数据为不满足参数中所给的条件</li></ul></li><li><font color="DarkViolet" size="3">get(**kwargs)</font><ul><li>获取单条数据<ol><li>代码：<ul><li>Person.objects.get()</li></ul></li></ol></li></ul></li><li><font color="DarkViolet" size="3">order_by(*field)</font><ul><li>可以进行查询结果的排序<ol><li>代码：<ul><li>Person.objects.all().order_by()</li></ul></li></ol></li></ul></li><li><font color="DarkViolet" size="3">count()</font><ul><li>返回数据库中字段的个数<ol><li>代码：<ul><li>models.Person.objects.filter(age=20).count()</li></ul></li></ol></li></ul></li><li><font color="DarkViolet" size="3">values(*fields)</font><ul><li>返回查询的结果，返回的是字典不是实例对象<ol><li>代码：<ul><li>models.Person.objects.all().values()</li></ul></li></ol></li></ul></li></ol><p><font color="red" size="4">修改对象：</font></p><ul><li>代码：<ol><li>models.Person.objects.filter(age__gt=40).update(age=18)<ul><li>将年纪等于40的改为18</li></ul></li></ol></li></ul><p><font color="red" size="4">删除对象：</font></p><ul><li>代码：<ol><li>models.Person.objects.get(    ).delete()</li></ol></li></ul><p><font color="red" size="5">字段关系：</font></p><ol><li><p><font color="Sienna" size="3">一对一：</font></p><ul><li><p>一个表和一个表</p></li><li><p>一对一的关系：继承关系</p><ol><li><p><font color="SandyBrown" size="4">举例子：</font></p><ul><li><p>一个老师对应一个学生</p></li><li><p>一夫一妻</p></li><li><p>一个人一个水杯</p></li><li><p>一个人一张身份证</p><ol><li><p><font color="SandyBrown" size="4">代码：</font></p><ol><li><p>class Teacher(models.Model):</p><pre><code>name =models.CharField(max_length=50)   age = models.CharField(max_length=50)   def __str__(self):       return self.name</code></pre><p>class Professor(models.Model):</p><pre><code> teacher=models.OneToOneField(Teacher,primary_key=True,on_delete=models.CASCADE)big_project = models.CharField(max_length=50)def __str__(self):    return self.teacher.name</code></pre></li><li><p><font color="SandyBrown" size="4">展示效果的操作方法</font></p><ol><li><p>在 manage.py shell 下进行数据库操作</p><ul><li><p><font color="SandyBrown" size="4">效果代码：</font></p><ol><li><p>t1 = Teacher.objects.create(name=’Jack’,age=’22’)<br>t2 = Teacher.objects.create(name=’Bob’,age=’17’)<br>p1 = Professor.objects.create(teacher=t1,big_project=’雾霾净化术’)<br>p1.teacher</p><p>&lt;Teacher: Jack&gt;<br>p1.teacher = t2<br>p1.save()<br>p1.teacher<br>&lt;Teacher: Bob&gt;</p></li></ol></li></ul><p><font color="red" size="4">注意：</font></p><ul><li>​    正确的做法应该是将某一条数据的一对一关系通过 delete 关系先删除之后再重新赋予</li></ul></li></ol></li></ol></li></ol></li></ul></li></ol></li></ul></li><li><p><font color="Sienna" size="3">多对一：</font></p><ul><li>多张表对一张表</li><li>Django中定义多对一的关系<ol><li><font color="LightSeaGreen" size="3">django.db.models.ForeignKey</font></li></ol></li><li>Fo’re’i’gnkey必须要有一个位置参数这个参数用来和模型关联<ol><li><font color="SandyBrown" size="4">举例子：</font><ul><li>多个学生使用一个饮水机</li><li>一个饮水机可以给多桶水加热</li><li>一个班主任带多个班</li><li>一夫多妻制<ul><li><font color="SandyBrown" size="4">代码：</font><ol><li>class Headmaster(models.Model):<pre><code>name = models.CharField(max_length=50)   def __str__(self):       return self.name</code></pre>class Class(models.Model):<pre><code>class_name = models.CharField(max_length=50)teacher = models.ForeignKey(Headmaster,null=True,on_delete=models.SET_NULL)def __str__(self):    return self.class_name</code></pre></li><li><font color="SandyBrown" size="4">查看效果代码：</font><ul><li>在 manage.py shell 下进行数据库操作</li><li>代码：<ul><li>H1 = Headmaster(name=’渔夫’)<br>H1.save()<br>H1<br>&lt;Headmaster: 渔夫&gt;<br>H2 = Headmaster(name=’农夫’)<br>H2.save()<br>Headmaster.objects.all()<br>[&lt;Headmaster: 渔夫&gt;, &lt;Headmaster: 农夫&gt;]</li></ul></li></ul></li></ol></li></ul></li></ul></li></ol></li></ul></li><li><p><font color="Sienna" size="3">多对多：</font></p><ul><li><p>多张表对多张表</p><ol><li><p><font color="SandyBrown" size="4">举例子：</font></p><ul><li><p>多个学生喝几桶水</p></li><li><p>多个学生使用多个电灯泡照明</p><ol><li><p><font color="SandyBrown" size="4">代码：</font></p><p>class Artist(models.Model):</p><pre><code>artist_name = models.CharField(max_length=50)def __str__(self):    return self.artist_name</code></pre><p>class Band(models.Model):</p><pre><code>band_name = models.CharField(max_length=50)artist = models.ManyToManyField(Artist)def __str__(self):    return self.band_name</code></pre></li><li><p><font color="SandyBrown" size="4">查看效果：</font></p><p>from bbs.models import Artist,Band</p><p>A1 = Artist.objects.create(artist_name=’Jack’)<br>A2 = Artist.objects.create(artist_name=’Bob’)<br>B1 = Band.objects.create(band_name=’FiveMonthDay’)<br>B2 = Band.objects.create(band_name=’SHE’)</p><ul><li><p>当多对多要添加字段时，可以使用add进行添加</p></li><li><p><font color="SandyBrown" size="3">代码：</font></p><ol><li><p>B1.artist.add(A1,A2)</p><p>B2.artist.add(A2)</p></li></ol></li></ul></li></ol></li></ul></li></ol></li></ul></li></ol><p><font color="red" size="5">反向查询：</font></p><ul><li><p>使用_set进行反向查询</p></li><li><p><font color="red" size="3">注意：</font>related_name一定是一个唯一的值，否则反向查找时会出现二异性错误</p></li><li><p><font color="SandyBrown" size="4">代码：</font></p><ul><li><p>class Aramy(models.Model):</p><pre><code>name = models.CharField(max_length=30)  def __str__(self):      return self.name</code></pre><p>class Soldier(models.Model):</p><pre><code>aramy = models.ForeignKey(Aramy,on_delete=models.CASCADE)name = models.CharField(max_length=30)def __str__(self):    return self.name</code></pre><ul><li><font color="SandyBrown" size="3">首先创建一些数据添加进去：</font><ul><li><font color="SandyBrown" size="3">代码：</font><ul><li>a1 = Aramy(name=’一军’)<br>a1.save()<br>s1 = Soldier(name=’张三’,aramy=a1)<br>s1.save()<br>s2 = Soldier(name=’李四’,aramy=a1)<br>s2.save()</li></ul></li></ul></li></ul></li><li><p><font color="SandyBrown" size="3">使用filter查询：</font></p><ul><li>a1.soldier_set.filter(name=’张三’)</li></ul></li><li><p><font color="SandyBrown" size="3">全部查询：</font></p><ul><li>a1.soldier_set.all()</li></ul></li><li><p>通过relater_name进行查询</p><ul><li><p><font color="red" size="3">注意：</font></p><ul><li><font color="OldLace" size="3">related_name必须唯一</font></li></ul></li><li><p><font color="SandyBrown" size="3">代码：</font></p><p>class Aramy(models.Model):</p><pre><code>name = models.CharField(max_length=30)def __str__(self):    return self.name</code></pre><p>class Soldier(models.Model):</p><pre><code>aramy = models.ForeignKey(Aramy,on_delete=models.CASCADE,related_name=&apos;soldier&apos;)name = models.CharField(max_length=30)def __str__(self):    return self.name</code></pre></li></ul></li></ul></li><li><p><font color="red" size="4">反向查询：</font></p><ul><li><p>a1 = Aramy.objects.all()[0]</p><p>s1 = Soldier.objects.get(name=’张三’)<br>a1.soldier.all()</p></li><li><p><font color="red" size="3">注意：</font></p><ul><li>relater_name一定时一个唯一的值，否则方向查找会出现异性错误</li></ul></li></ul><ol><li><font color="red" size="4">取消反向查询：</font><ul><li>使用related_name初始化为+，来取消反向查询</li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓展User模型一对一方式拓展</title>
      <link href="/50580.html"/>
      <url>/50580.html</url>
      
        <content type="html"><![CDATA[<h4 id="2-一对一外键："><a href="#2-一对一外键：" class="headerlink" title="2.一对一外键："></a>2.一对一外键：</h4><p>如果你对用户验证方法authenticate没有其他要求，就是使用username和password即可完成。但是想要在原来模型的基础之上添加新的字段，那么可以使用一对一外键的方式。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtension</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=<span class="string">'extension'</span>)</span><br><span class="line">    birthday = models.DateField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    school = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#监听user的变化，括号内第一个值为接收什么新号 第二个值为接收谁发出的新号</span></span><br><span class="line"><span class="meta">@receiver(post_save, sender=User)</span></span><br><span class="line"><span class="comment">#第三个值为是否是新创建的。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user_extension</span><span class="params">(sender, instance, created, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment">#如果是第一次创建，那就创建一个userex进行绑定。</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        UserExtension.objects.create(user=instance)</span><br><span class="line">    <span class="comment">#如果不是第一次创建，将进行保存</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        instance.extension.save()</span><br></pre></td></tr></table></figure><p>以上定义一个UserExtension的模型，并且让她和User模型进行一对一的绑定，以后我们新增的字段，就添加到UserExtension上。并且还写了一个接受保存模型的信号处理方法，只要是User调用了save方法，那么就会创建一个UserExtension和User进行绑定。</p><p>一对一的关系会更加的安全。</p><p>这种方法不会破坏原有的user，进行实际开发的时候建议使用这种方法。</p><p>就是比较麻烦一点。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django内置User模型的基本使用</title>
      <link href="/11697.html"/>
      <url>/11697.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户对象"><a href="#用户对象" class="headerlink" title="用户对象"></a>用户对象</h1><h2 id="User模型"><a href="#User模型" class="headerlink" title="User模型"></a>User模型</h2><p>User模型是这个框架的核心部分。他的完整的路径是在django.contrib.auth.models.User。以下对这个User对象做一个简单了解：</p><h3 id="字段："><a href="#字段：" class="headerlink" title="字段："></a>字段：</h3><p>内置的User模型拥有以下的字段：</p><ul><li><p>username：用户名。150个字符以内。可以包含数字和英文字符，以及_、@、+、.和-字符。不能为空，且必须唯一！</p></li><li><p>first_name：歪果仁的first_name，在30个字符以内。可以为空。</p></li><li><p>last_name：歪果仁的last_name，在150个字符以内。可以为空。</p></li><li><p>email：邮箱。可以为空。</p></li><li><p>password：密码。经过哈希过后的密码。</p></li><li><p>groups：分组。一个用户可以属于多个分组，一个分组可以拥有多个用户。groups这个字段是跟Group的一个多对多的关系。</p></li><li><p>user_permissions：权限。一个用户可以拥有多个权限，一个权限可以被多个用户所有用。和Permission属于一种多对多的关系。</p></li><li><p>is_staff：是否可以进入到admin的站点。代表是否是员工。</p></li><li><p>is_active：是否是可用的。对于一些想要删除账号的数据，我们设置这个值为False就可以了，而不是真正的从数据库中删除。</p></li><li><p>is_superuser：是否是超级管理员。如果是超级管理员，那么拥有整个网站的所有权限。</p></li><li><p>last_login：上次登录的时间。</p></li><li><p>date_joined：账号创建的时间。</p></li></ul><h3 id="Models类"><a href="#Models类" class="headerlink" title="Models类"></a>Models类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.base_user <span class="keyword">import</span> AbstractBaseUser, BaseUserManager</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> PermissionDenied</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.models.manager <span class="keyword">import</span> EmptyManager</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext_lazy <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .validators <span class="keyword">import</span> UnicodeUsernameValidator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_last_login</span><span class="params">(sender, user, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A signal receiver which updates the last_login date for</span></span><br><span class="line"><span class="string">    the user logging in.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user.last_login = timezone.now()</span><br><span class="line">    user.save(update_fields=[<span class="string">'last_login'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_by_natural_key</span><span class="params">(self, codename, app_label, model)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get(</span><br><span class="line">            codename=codename,</span><br><span class="line">            content_type=ContentType.objects.db_manager(self.db).get_by_natural_key(app_label, model),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The permissions system provides a way to assign permissions to specific</span></span><br><span class="line"><span class="string">    users and groups of users.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The permission system is used by the Django admin site, but may also be</span></span><br><span class="line"><span class="string">    useful in your own code. The Django admin site uses permissions as follows:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        - The "add" permission limits the user's ability to view the "add" form</span></span><br><span class="line"><span class="string">          and add an object.</span></span><br><span class="line"><span class="string">        - The "change" permission limits a user's ability to view the change</span></span><br><span class="line"><span class="string">          list, view the "change" form and change an object.</span></span><br><span class="line"><span class="string">        - The "delete" permission limits the ability to delete an object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Permissions are set globally per type of object, not per specific object</span></span><br><span class="line"><span class="string">    instance. It is possible to say "Mary may change news stories," but it's</span></span><br><span class="line"><span class="string">    not currently possible to say "Mary may change news stories, but only the</span></span><br><span class="line"><span class="string">    ones she created herself" or "Mary may only change news stories that have a</span></span><br><span class="line"><span class="string">    certain status or publication date."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Three basic permissions -- add, change and delete -- are automatically</span></span><br><span class="line"><span class="string">    created for each Django model.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(_(<span class="string">'name'</span>), max_length=<span class="number">255</span>)</span><br><span class="line">    content_type = models.ForeignKey(</span><br><span class="line">        ContentType,</span><br><span class="line">        models.CASCADE,</span><br><span class="line">        verbose_name=_(<span class="string">'content type'</span>),</span><br><span class="line">    )</span><br><span class="line">    codename = models.CharField(_(<span class="string">'codename'</span>), max_length=<span class="number">100</span>)</span><br><span class="line">    objects = PermissionManager()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = _(<span class="string">'permission'</span>)</span><br><span class="line">        verbose_name_plural = _(<span class="string">'permissions'</span>)</span><br><span class="line">        unique_together = ((<span class="string">'content_type'</span>, <span class="string">'codename'</span>),)</span><br><span class="line">        ordering = (<span class="string">'content_type__app_label'</span>, <span class="string">'content_type__model'</span>,</span><br><span class="line">                    <span class="string">'codename'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s | %s | %s"</span> % (</span><br><span class="line">            self.content_type.app_label,</span><br><span class="line">            self.content_type,</span><br><span class="line">            self.name,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">natural_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.codename,) + self.content_type.natural_key()</span><br><span class="line">    natural_key.dependencies = [<span class="string">'contenttypes.contenttype'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The manager for the auth's Group model.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_by_natural_key</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get(name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Groups are a generic way of categorizing users to apply permissions, or</span></span><br><span class="line"><span class="string">    some other label, to those users. A user can belong to any number of</span></span><br><span class="line"><span class="string">    groups.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A user in a group automatically has all the permissions granted to that</span></span><br><span class="line"><span class="string">    group. For example, if the group 'Site editors' has the permission</span></span><br><span class="line"><span class="string">    can_edit_home_page, any user in that group will have that permission.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Beyond permissions, groups are a convenient way to categorize users to</span></span><br><span class="line"><span class="string">    apply some label, or extended functionality, to them. For example, you</span></span><br><span class="line"><span class="string">    could create a group 'Special users', and you could write code that would</span></span><br><span class="line"><span class="string">    do special things to those users -- such as giving them access to a</span></span><br><span class="line"><span class="string">    members-only portion of your site, or sending them members-only email</span></span><br><span class="line"><span class="string">    messages.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(_(<span class="string">'name'</span>), max_length=<span class="number">80</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    permissions = models.ManyToManyField(</span><br><span class="line">        Permission,</span><br><span class="line">        verbose_name=_(<span class="string">'permissions'</span>),</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    objects = GroupManager()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = _(<span class="string">'group'</span>)</span><br><span class="line">        verbose_name_plural = _(<span class="string">'groups'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">natural_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.name,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span><span class="params">(BaseUserManager)</span>:</span></span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_user</span><span class="params">(self, username, email, password, **extra_fields)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create and save a user with the given username, email, and password.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The given username must be set'</span>)</span><br><span class="line">        email = self.normalize_email(email)</span><br><span class="line">        username = self.model.normalize_username(username)</span><br><span class="line">        user = self.model(username=username, email=email, **extra_fields)</span><br><span class="line">        user.set_password(password)</span><br><span class="line">        user.save(using=self._db)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(self, username, email=None, password=None, **extra_fields)</span>:</span></span><br><span class="line">        extra_fields.setdefault(<span class="string">'is_staff'</span>, <span class="literal">False</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">'is_superuser'</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._create_user(username, email, password, **extra_fields)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_superuser</span><span class="params">(self, username, email, password, **extra_fields)</span>:</span></span><br><span class="line">        extra_fields.setdefault(<span class="string">'is_staff'</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">'is_superuser'</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> extra_fields.get(<span class="string">'is_staff'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Superuser must have is_staff=True.'</span>)</span><br><span class="line">        <span class="keyword">if</span> extra_fields.get(<span class="string">'is_superuser'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Superuser must have is_superuser=True.'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._create_user(username, email, password, **extra_fields)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># A few helper functions for common logic between User and AnonymousUser.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_user_get_all_permissions</span><span class="params">(user, obj)</span>:</span></span><br><span class="line">    permissions = set()</span><br><span class="line">    <span class="keyword">for</span> backend <span class="keyword">in</span> auth.get_backends():</span><br><span class="line">        <span class="keyword">if</span> hasattr(backend, <span class="string">"get_all_permissions"</span>):</span><br><span class="line">            permissions.update(backend.get_all_permissions(user, obj))</span><br><span class="line">    <span class="keyword">return</span> permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_user_has_perm</span><span class="params">(user, perm, obj)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A backend can raise `PermissionDenied` to short-circuit permission checking.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> backend <span class="keyword">in</span> auth.get_backends():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(backend, <span class="string">'has_perm'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> backend.has_perm(user, perm, obj):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> PermissionDenied:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_user_has_module_perms</span><span class="params">(user, app_label)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A backend can raise `PermissionDenied` to short-circuit permission checking.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> backend <span class="keyword">in</span> auth.get_backends():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(backend, <span class="string">'has_module_perms'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> backend.has_module_perms(user, app_label):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> PermissionDenied:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionsMixin</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Add the fields and methods necessary to support the Group and Permission</span></span><br><span class="line"><span class="string">    models using the ModelBackend.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    is_superuser = models.BooleanField(</span><br><span class="line">        _(<span class="string">'superuser status'</span>),</span><br><span class="line">        default=<span class="literal">False</span>,</span><br><span class="line">        help_text=_(</span><br><span class="line">            <span class="string">'Designates that this user has all permissions without '</span></span><br><span class="line">            <span class="string">'explicitly assigning them.'</span></span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">    groups = models.ManyToManyField(</span><br><span class="line">        Group,</span><br><span class="line">        verbose_name=_(<span class="string">'groups'</span>),</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        help_text=_(</span><br><span class="line">            <span class="string">'The groups this user belongs to. A user will get all permissions '</span></span><br><span class="line">            <span class="string">'granted to each of their groups.'</span></span><br><span class="line">        ),</span><br><span class="line">        related_name=<span class="string">"user_set"</span>,</span><br><span class="line">        related_query_name=<span class="string">"user"</span>,</span><br><span class="line">    )</span><br><span class="line">    user_permissions = models.ManyToManyField(</span><br><span class="line">        Permission,</span><br><span class="line">        verbose_name=_(<span class="string">'user permissions'</span>),</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        help_text=_(<span class="string">'Specific permissions for this user.'</span>),</span><br><span class="line">        related_name=<span class="string">"user_set"</span>,</span><br><span class="line">        related_query_name=<span class="string">"user"</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group_permissions</span><span class="params">(self, obj=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return a list of permission strings that this user has through their</span></span><br><span class="line"><span class="string">        groups. Query all available auth backends. If an object is passed in,</span></span><br><span class="line"><span class="string">        return only permissions matching this object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        permissions = set()</span><br><span class="line">        <span class="keyword">for</span> backend <span class="keyword">in</span> auth.get_backends():</span><br><span class="line">            <span class="keyword">if</span> hasattr(backend, <span class="string">"get_group_permissions"</span>):</span><br><span class="line">                permissions.update(backend.get_group_permissions(self, obj))</span><br><span class="line">        <span class="keyword">return</span> permissions</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_permissions</span><span class="params">(self, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> _user_get_all_permissions(self, obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_perm</span><span class="params">(self, perm, obj=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return True if the user has the specified permission. Query all</span></span><br><span class="line"><span class="string">        available auth backends, but return immediately if any backend returns</span></span><br><span class="line"><span class="string">        True. Thus, a user who has permission from a single auth backend is</span></span><br><span class="line"><span class="string">        assumed to have permission in general. If an object is provided, check</span></span><br><span class="line"><span class="string">        permissions for that object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Active superusers have all permissions.</span></span><br><span class="line">        <span class="keyword">if</span> self.is_active <span class="keyword">and</span> self.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Otherwise we need to check the backends.</span></span><br><span class="line">        <span class="keyword">return</span> _user_has_perm(self, perm, obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_perms</span><span class="params">(self, perm_list, obj=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return True if the user has each of the specified permissions. If</span></span><br><span class="line"><span class="string">        object is passed, check if the user has all required perms for it.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> all(self.has_perm(perm, obj) <span class="keyword">for</span> perm <span class="keyword">in</span> perm_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_module_perms</span><span class="params">(self, app_label)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return True if the user has any permissions in the given app label.</span></span><br><span class="line"><span class="string">        Use simlar logic as has_perm(), above.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Active superusers have all permissions.</span></span><br><span class="line">        <span class="keyword">if</span> self.is_active <span class="keyword">and</span> self.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _user_has_module_perms(self, app_label)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractUser</span><span class="params">(AbstractBaseUser, PermissionsMixin)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    An abstract base class implementing a fully featured User model with</span></span><br><span class="line"><span class="string">    admin-compliant permissions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Username and password are required. Other fields are optional.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#用户名</span></span><br><span class="line">    username_validator = UnicodeUsernameValidator()</span><br><span class="line"><span class="comment">#设置为唯一，并且以后验证用户名和密码是否正确的时候就是用的username</span></span><br><span class="line">    username = models.CharField(</span><br><span class="line">        _(<span class="string">'username'</span>),</span><br><span class="line">        max_length=<span class="number">150</span>,</span><br><span class="line">        unique=<span class="literal">True</span>,</span><br><span class="line">        help_text=_(<span class="string">'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'</span>),</span><br><span class="line">        validators=[username_validator],</span><br><span class="line">        error_messages=&#123;</span><br><span class="line">            <span class="string">'unique'</span>: _(<span class="string">"A user with that username already exists."</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#姓</span></span><br><span class="line">    first_name = models.CharField(_(<span class="string">'first name'</span>), max_length=<span class="number">30</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#名</span></span><br><span class="line">    last_name = models.CharField(_(<span class="string">'last name'</span>), max_length=<span class="number">150</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    email = models.EmailField(_(<span class="string">'email address'</span>), blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#是否是员工</span></span><br><span class="line">    is_staff = models.BooleanField(</span><br><span class="line">        _(<span class="string">'staff status'</span>),</span><br><span class="line">        default=<span class="literal">False</span>,</span><br><span class="line">        help_text=_(<span class="string">'Designates whether the user can log into this admin site.'</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#是否是可用</span></span><br><span class="line">    is_active = models.BooleanField(</span><br><span class="line">        _(<span class="string">'active'</span>),</span><br><span class="line">        default=<span class="literal">True</span>,</span><br><span class="line">        help_text=_(</span><br><span class="line">            <span class="string">'Designates whether this user should be treated as active. '</span></span><br><span class="line">            <span class="string">'Unselect this instead of deleting accounts.'</span></span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#创建时间，什么时候加入的</span></span><br><span class="line">    date_joined = models.DateTimeField(_(<span class="string">'date joined'</span>), default=timezone.now)</span><br><span class="line"></span><br><span class="line">    objects = UserManager()</span><br><span class="line"></span><br><span class="line">    EMAIL_FIELD = <span class="string">'email'</span></span><br><span class="line">    USERNAME_FIELD = <span class="string">'username'</span></span><br><span class="line">    REQUIRED_FIELDS = [<span class="string">'email'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = _(<span class="string">'user'</span>)</span><br><span class="line">        verbose_name_plural = _(<span class="string">'users'</span>)</span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().clean()</span><br><span class="line">        self.email = self.__class__.objects.normalize_email(self.email)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_full_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return the first_name plus the last_name, with a space in between.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        full_name = <span class="string">'%s %s'</span> % (self.first_name, self.last_name)</span><br><span class="line">        <span class="keyword">return</span> full_name.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_short_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the short name for the user."""</span></span><br><span class="line">        <span class="keyword">return</span> self.first_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">email_user</span><span class="params">(self, subject, message, from_email=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Send an email to this user."""</span></span><br><span class="line">        send_mail(subject, message, from_email, [self.email], **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Users within the Django authentication system are represented by this</span></span><br><span class="line"><span class="string">    model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Username, password and email are required. Other fields are optional.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(AbstractUser.Meta)</span>:</span></span><br><span class="line">        swappable = <span class="string">'AUTH_USER_MODEL'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousUser</span>:</span></span><br><span class="line">    id = <span class="literal">None</span></span><br><span class="line">    pk = <span class="literal">None</span></span><br><span class="line">    username = <span class="string">''</span></span><br><span class="line">    is_staff = <span class="literal">False</span></span><br><span class="line">    is_active = <span class="literal">False</span></span><br><span class="line">    is_superuser = <span class="literal">False</span></span><br><span class="line">    _groups = EmptyManager(Group)</span><br><span class="line">    _user_permissions = EmptyManager(Permission)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'AnonymousUser'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> isinstance(other, self.__class__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># instances always return the same hash value</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Django doesn't provide a DB representation for AnonymousUser."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Django doesn't provide a DB representation for AnonymousUser."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_password</span><span class="params">(self, raw_password)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Django doesn't provide a DB representation for AnonymousUser."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_password</span><span class="params">(self, raw_password)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Django doesn't provide a DB representation for AnonymousUser."</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groups</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._groups</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._user_permissions</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group_permissions</span><span class="params">(self, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> set()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_permissions</span><span class="params">(self, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> _user_get_all_permissions(self, obj=obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_perm</span><span class="params">(self, perm, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> _user_has_perm(self, perm, obj=obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_perms</span><span class="params">(self, perm_list, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> perm <span class="keyword">in</span> perm_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.has_perm(perm, obj):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_module_perms</span><span class="params">(self, module)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> _user_has_module_perms(self, module)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_anonymous</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_authenticated</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_username</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><h2 id="User模型的基本用法"><a href="#User模型的基本用法" class="headerlink" title="User模型的基本用法"></a>User模型的基本用法</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>通过create_user方法可以快速的创建用户。这个方法必须要传递username、email、password。</p><p>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.create_user(<span class="string">'zhiliao'</span>,<span class="string">'hynever@zhiliao.com'</span>,<span class="string">'111111'</span>)</span><br><span class="line"><span class="comment"># 此时user对象已经存储到数据库中了。当然你还可以继续使用user对象进行一些修改</span></span><br><span class="line">user.last_name = <span class="string">'abc'</span></span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h3 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h3><p>创建超级用户有两种方式。第一种是使用代码的方式。用代码创建超级用户跟创建普通用户非常的类似，只不过是使用create_superuser。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">User.objects.create_superuser(<span class="string">'admin'</span>,<span class="string">'admin@163.com'</span>,<span class="string">'111111'</span>)</span><br></pre></td></tr></table></figure><p>也可以通过命令行的方式。命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>后面就会提示你输入用户名、邮箱以及密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要输入的命令</span></span><br><span class="line">C:\Users\Administrator\Desktop\Django项目\Students_comm&gt;python manage.py createsuperuser</span><br><span class="line">Username (leave blank to use <span class="string">'administrator'</span>):      <span class="comment">#用户名</span></span><br><span class="line">Email address:                 <span class="comment">#emali 可以为空</span></span><br><span class="line">Password:                 <span class="comment">#密码：不可以纯数字，低于6位数</span></span><br><span class="line">Password (again):          <span class="comment">#确认密码</span></span><br><span class="line">Superuser created successfully.          <span class="comment">#提示超级用户创建成功</span></span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>因为密码是需要经过加密后才能存储进去的。所以如果想要修改密码，不能直接修改password字段，而需要通过调用set_password来达到修改密码的目的。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">user.set_password(<span class="string">'新的密码'</span>)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><p>Django的验证系统已经帮我们实现了登录验证的功能。通过<strong>django.contrib.auth.authenticate</strong>即可实现。这个方法只能通过username和password来进行验证。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line">user = authenticate(username=<span class="string">'zhiliao'</span>, password=<span class="string">'111111'</span>)</span><br><span class="line"><span class="comment"># 如果验证通过了，那么就会返回一个user对象。</span></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 执行验证通过后的代码</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 执行验证没有通过的代码。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django User模型使用proxy模型</title>
      <link href="/38757.html"/>
      <url>/38757.html</url>
      
        <content type="html"><![CDATA[<h3 id="扩展用户模型"><a href="#扩展用户模型" class="headerlink" title="扩展用户模型"></a>扩展用户模型</h3><p><strong>在中国一般都是使用手机号邮箱等其他方式来登录，一般不适用用户名，所以需要拓展模型。</strong></p><p>Django内置的User模型虽然已经足够强大了。但是有时候还是不能满足我们的需求。比如在验证用户登录的时候，他用的是用户名作为验证，而我们有时候需要通过手机号码或者邮箱来进行验证。还有比如我们想要增加一些新的字段。那么这时候我们就需要扩展用户模型了。扩展用户模型有多种方式。这里我们来一一讨论下。</p><h4 id="1-设置Proxy模型："><a href="#1-设置Proxy模型：" class="headerlink" title="1.设置Proxy模型："></a>1.设置Proxy模型：</h4><p><strong>第一种方式使用代理，可插拔。</strong></p><p>如果你对Django提供的字段，以及验证的方法都比较满意，没有什么需要改的。但是只是需要在他原有的基础之上增加一些操作的方法。那么建议使用这种方式。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(User)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_blacklist</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.objects.filter(is_active=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>在以上，我们定义了一个Person类，让他继承自User，并且在Meta中设置proxy=True，说明这个只是User的一个代理模型。他并不会影响原来User模型在数据库中表的结构。以后如果你想方便的获取所有黑名单的人，那么你就可以通过Person.get_blacklist()就可以获取到。并且User.objects.all()和Person.objects.all()其实是等价的。因为他们都是从User这个模型中获取所有的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/46132.html"/>
      <url>/46132.html</url>
      
        <content type="html"><![CDATA[<p>首先要清楚什么是单例模式，单例模式即一个类有且仅有一个实例，那么通过python怎么实现一个类只有一个实例呢。</p><p>首先创建一个类，比如一个世界只有一个你，不会有第二个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">a = My()</span><br><span class="line">print(id(a))</span><br><span class="line">b = My()</span><br><span class="line">print(id(b))</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line"><span class="number">935478784072</span></span><br><span class="line"><span class="number">935478784186</span></span><br></pre></td></tr></table></figure><p>通过打印实例id可以发现，显然世界上创建了两个实例。</p><p>那么怎么能够让类只创建一个实例，而后在创建的实例是返回上一次的对象的引用呢？</p><p>我们了解到，python中，一个类创建对象实例是用过调用父类object的<strong>new</strong>(cls)方法来创建对象的</p><p>我们可以通过重写<em>new</em>(cls)方法去实现只创建一个实例</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance=<span class="literal">None</span> <span class="comment">#定义一个类属性做判断</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> cls.__instance==<span class="literal">None</span>:</span><br><span class="line">            <span class="comment">#如果__instance为空证明是第一次创建实例</span></span><br><span class="line">            <span class="comment">#通过父类的__new__(cls)创建实例</span></span><br><span class="line">            cls.__instance=object.__new__(cls)</span><br><span class="line">            <span class="keyword">return</span>  cls.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#返回上一个对象的引用</span></span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line"> </span><br><span class="line">a = My()</span><br><span class="line">print(id(a))</span><br><span class="line">b = My()</span><br><span class="line">print(id(b))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1730389200</span></span><br><span class="line"><span class="number">1730389200</span></span><br></pre></td></tr></table></figure><p>可以看出他们id相同，是同一个对象。。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器与生成器</title>
      <link href="/2770.html"/>
      <url>/2770.html</url>
      
        <content type="html"><![CDATA[<p>​    迭代器是访问集合元素的一种方式，是一个可以记住遍历位置的对象。它从第一个元素开始访问，直到所有的元素被访问完为止。迭代器只能前进不能后退。</p><p>​    首先需要知道可迭代对象，迭代也可以叫做遍历，name也可以这样说：可以被for循环遍历的对象称之为可迭代对象。</p><p>​    判断是否可迭代对象，python提供了isinstance()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fromcollectionsimportIterable</span><br><span class="line"></span><br><span class="line">print(isinstance([<span class="number">11</span>,<span class="number">22</span>],Iterable))</span><br><span class="line">print(isinstance(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,Iterable))</span><br><span class="line">print(isinstance(<span class="string">"hahah"</span>,Iterable))</span><br><span class="line">print(isinstance(<span class="number">1234</span>,Iterable))</span><br></pre></td></tr></table></figure><p>那么一个具有<strong>iter</strong>方法的对象，就是一个可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classMyList(object):</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.list=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,item)</span>:</span></span><br><span class="line">self.list.append(item)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_list=MyList()</span><br><span class="line">my_list.add(<span class="number">1</span>)</span><br><span class="line">my_list.add(<span class="number">2</span>)</span><br><span class="line">my_list.add(<span class="number">3</span>)</span><br><span class="line">print(my_list.list)</span><br><span class="line"></span><br><span class="line">list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">a = iter(list)</span><br><span class="line">print(next(a))</span><br><span class="line">print(next(a))</span><br><span class="line">print(next(a))</span><br><span class="line">print(next(a))</span><br><span class="line">print(next(a))</span><br></pre></td></tr></table></figure><p>当我们已经迭代完最后一个数据之后，在此调用next()函数会抛出StopIteration的异常，来告诉我们所有数据都已迭代完成，不用再执行next()函数了。</p><p>python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<strong>iter</strong>方法，而<strong>iter</strong>方法要返回一个迭代器（本身）</p><p>迭代器本质：一个实现iter方法和next方法的对象，就是迭代器。</p><h3 id="迭代器实现斐波那契数列"><a href="#迭代器实现斐波那契数列" class="headerlink" title="迭代器实现斐波那契数列"></a>迭代器实现斐波那契数列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feibonaqi</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">self.num1=<span class="number">0</span><span class="comment">#第一个元素赋值</span></span><br><span class="line">self.num2=<span class="number">1</span><span class="comment">#第二个元素赋值</span></span><br><span class="line">self.n=n<span class="comment">#数列长度</span></span><br><span class="line">self.index=<span class="number">0</span><span class="comment">#记录位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self.index &lt; self.n:</span><br><span class="line">num=self.num1</span><br><span class="line">            self.num1,self.num2 =s elf.num2,self.num2+self.num1</span><br><span class="line">self.index += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> StopIteration<span class="comment">#停止迭代</span></span><br><span class="line"></span><br><span class="line">if__name__==<span class="string">'__main__'</span>:</span><br><span class="line">fei=Feibonaqi(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#foriinfei:</span></span><br><span class="line"><span class="comment">#print(i,end="")</span></span><br><span class="line"><span class="comment">#第二种强转方法</span></span><br><span class="line">print(list(fei))</span><br></pre></td></tr></table></figure><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>生成器是一种特殊的迭代器，它可以生成一系列数据用来迭代.</p><p>列表推导式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">G=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(G)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">'''而使用小括号已经是一个生成器'''</span></span><br><span class="line">L=(x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">print(L)</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x000001F50F5F6C00</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="生成器实现斐波那契数列"><a href="#生成器实现斐波那契数列" class="headerlink" title="生成器实现斐波那契数列"></a>生成器实现斐波那契数列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fei</span><span class="params">(n)</span>:</span></span><br><span class="line">num1,num2=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">current=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current&lt;n:</span><br><span class="line">num=num1</span><br><span class="line">num1,num2=num2,num2+num1</span><br><span class="line">current+=<span class="number">1</span></span><br><span class="line"><span class="keyword">yield</span> num</span><br><span class="line"></span><br><span class="line">if__name__==<span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fei(<span class="number">10</span>):</span><br><span class="line">print(i,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>使用yield关键字的函数不再是函数，而是生成器（使用了yield的函数就是生成器）</p><p>yield的两个特点：</p><p>1、保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</p><p>2、将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</p><p><font color="red" size="6px">迭代器与生成器的区别</font></p><p>生成器能够做到迭代器能做的所有事，而且因为自动创建了iter和next方法，生成器显得特别简洁，而且生成器也是高效的，使用生成器表达式取代列表解析式可以节省内存，当生成器终结时，还会自动抛出Stopiteration异常</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
